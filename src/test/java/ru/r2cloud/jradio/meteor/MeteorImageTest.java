package ru.r2cloud.jradio.meteor;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.junit.Test;

import ru.r2cloud.jradio.TestUtil;
import ru.r2cloud.jradio.fec.ccsds.UncorrectableException;
import ru.r2cloud.jradio.lrpt.Packet;
import ru.r2cloud.jradio.lrpt.PacketReassembly;
import ru.r2cloud.jradio.lrpt.Vcdu;

public class MeteorImageTest {

	@Test
	public void success() throws Exception {
		MeteorImage image = new MeteorImage(new PacketReassembly(readVcdu()));
		TestUtil.assertImage("expected8bitsoft.png", image.toBufferedImage());
	}

	@Test
	public void testUnknownAPID() throws Exception {
		MeteorImage image = new MeteorImage(new PacketReassembly(readVcdu()));
		assertNull(image.toBufferedImage(1, 2, 3)); // not random. explicitly unknown apid
	}

	@Test
	public void testRecoverPartialPacket() throws Exception {
		Vcdu previous = new Vcdu();
		previous.readExternal(new byte[] { 64, 5, 103, -120, 67, 0, 0, 0, 1, -82, -87, 36, 34, -37, -53, -75, -73, -68, -110, -11, -119, -74, 120, 89, 60, -72, -123, -76, -47, 29, -111, 66, 9, 71, 27, 90, 121, -111, 18, -67, -29, -63, 31, 26, 53, 29, 63, 80, -66, -45, 53, -69, 123, 95, 16, 120, 123,
				83, -71, -123, -82, -20, 36, 73, 46, 103, -115, -18, 18, 56, -18, -97, 78, -115, -30, -103, 37, -104, -51, -2, -111, 36, 87, 49, 8, 103, 111, 52, 21, 67, 34, 10, -77, -30, -101, -69, 121, 117, -115, 71, 74, -45, 111, 46, -82, 60, 45, 22, -95, 30, -95, 107, 109, 29, -57, -105, 29,
				-78, 77, 105, 29, -54, 75, 4, -42, -5, -83, -83, 25, 92, -57, 110, 98, 114, -111, 60, 106, -23, -125, -27, -77, -41, -47, 63, 15, 60, 115, 97, 103, -90, -23, -6, 44, -105, 26, -28, -117, 111, 49, -118, 93, 127, 80, -69, -76, -72, 91, 123, -23, -121, -37, 34, -123, -18, 97, -107, -96,
				88, 35, -119, -56, 69, -75, -123, 54, 90, 58, -18, -7, -39, -115, 123, -107, -67, -19, -34, -81, 109, 45, -44, -74, -13, 67, -87, 91, -126, 38, -74, 44, 26, 59, -127, 20, 40, 90, 75, 98, -84, -2, 101, -76, -83, -52, 114, 72, 8, 110, 50, -54, -37, -106, -109, -61, 122, -68, -38, -115,
				-51, -44, 83, 91, 53, -80, -122, 47, -35, 65, 41, 34, 88, -2, 95, 46, 88, -98, 45, -33, -22, 76, -101, 94, 38, 87, 36, 110, 36, 16, 114, 43, 66, -27, 18, 68, -98, 59, -121, 125, -29, -49, 62, 68, 5, -60, -17, 110, 35, 9, -26, -55, 12, -114, 126, -25, -33, -74, -107, -117, 35, 55, 28,
				103, 109, 87, -46, 103, -74, -109, 73, -71, -79, -106, 83, 127, 61, -124, 114, -54, 117, 75, -123, -123, -84, 60, -57, 99, 116, -42, -65, 104, -115, -107, 34, 107, 52, -111, 33, 16, 21, -113, -55, -122, 56, -45, -51, -111, -47, -51, 114, 90, 93, -41, -10, 53, -70, -88, 103, -70, 73,
				100, -108, -91, -47, -110, 54, -73, 97, 25, 112, 18, 61, -110, -99, -110, 43, 43, 5, 82, 48, -54, -123, -121, -52, 36, 90, -20, 45, 111, -42, -10, -36, 27, -123, -113, 108, -85, -124, 10, 22, 71, -63, 31, 51, 58, -122, 56, 7, 110, 21, -121, -33, 0, -100, 12, -125, 84, -27, -128, -37,
				114, 36, 114, -124, -110, -128, -112, 9, 81, -58, 7, -53, -9, -127, 31, 47, 60, -125, -73, -109, -127, 95, 8, 66, 45, 68, 1, -7, 34, -79, 2, 24, 13, 98, 0, -89, 56, 0, 0, -1, -16, 100, -6, 57, 103, 44, -92, -111, -128, -67, 119, 112, 93, 71, -44, -4, -57, -14, -56, -55, 24, -28, -46,
				59, 36, -86, 89, 114, 14, 6, 58, 19, -49, 114, 121, 98, -93, 60, 30, 72, 60, 100, 98, -86, 25, -100, 43, 47, 59, -104, -114, 119, -32, -108, 24, 36, 18, 51, -72, 113, -112, 125, -58, -27, -63, -51, 95, -76, -80, -80, 123, 96, -104, -55, 12, 93, -95, 32, 56, 4, -25, 63, -69, -55, 92,
				30, -71, 35, 1, -104, -114, 67, 48, -84, -5, -5, 99, -122, -120, 0, 34, 40, 4, 81, -93, -108, 30, 98, -71, -5, -32, 22, 13, 38, -42, 17, -110, 119, -31, 89, -43, 16, 114, 107, -109, 91, 75, -85, 70, -71, -69, -113, -54, 62, 99, 100, -61, 25, 39, 105, -56, 46, -82, -92, -112, 31,
				-123, 108, 14, 14, 67, 5, 6, -68, -45, -57, 26, 66, 120, -97, 75, -72, -78, 105, -91, -73, 116, 95, 51, 108, 45, -27, -71, 108, 56, -7, 73, 12, 74, 2, 88, -70, -100, 17, -116, -100, 12, -118, -4, -52, -8, -43, -5, 58, 120, -85, -30, -41, -119, 116, -19, 11, 78, -72, -118, -38, -62,
				57, 34, -121, 81, -44, -75, 22, -108, 8, -84, -30, -100, 75, 57, -126, 104, -46, -31, 26, -22, 50, -123, 33, -114, 104, -122, -39, 10, -17, -62, -4, -11, 75, -30, 95, -122, -18, -66, 31, -4, 46, 79, -122, -42, -82, -70, -59, -75, -98, -97, 14, -97, 5, -27, -22, -57, 22, -7, -127, 16,
				79, 3, -83, -80, 72, -34, 57, 85, 54, 36, 97, 24, -55, -106, 105, 15, -33, 74, -4, -65, -15, 79, -128, 124, 27, -95, 104, -6, -107, -42, -87, -88, 105, -42, -34, 34, 123, -92, 104, 44, 22, -6, 25, 17, 35, -30, 71, 89, 33, 54, 98, 84, 64, 76, -116, 73, 46, 22, 49, 26, 49, 87, 44,
				-107, -13, -83, -27, -99, -116, 105, 58, -37, 53, -45, -52, -37, -110, 63, 39, 106, 90, 0, 126, 86, 62, 98, -99, -14, 35, 14, 97, 80, -69, 88, -110, -60, 101, 113, 84, -76, -69, 59, 89, 110, 26, 45, 67, 81, -109, 79, 83, -127, -10, -105, 86, 104, 91, 50, 42, 54, 124, -88, 101, -108,
				-82, -59, 119, 37, 80, -72, -112, -82, 85, -64, 106, -72, -98, 50, -15, 38, -125, -10, -101, 47, 12, -8, -85, -60, 118, 26, 108, -61, 100, -93, 79, -44, -75, 29, 50, 57, -63, 72, -124, -34, 100, 54, -73 });
		Vcdu full = new Vcdu();
		full.readExternal(new byte[] { 64, 5, 103, -120, 67, 0, 0, 0, 1, -82, -87, 36, 34, -37, -53, -75, -73, -68, -110, -11, -119, -74, 120, 89, 60, -72, -123, -76, -47, 29, -111, 66, 9, 71, 27, 90, 121, -111, 18, -67, -29, -63, 31, 26, 53, 29, 63, 80, -66, -45, 53, -69, 123, 95, 16, 120, 123, 83,
				-71, -123, -82, -20, 36, 73, 46, 103, -115, -18, 18, 56, -18, -97, 78, -115, -30, -103, 37, -104, -51, -2, -111, 36, 87, 49, 8, 103, 111, 52, 21, 67, 34, 10, -77, -30, -101, -69, 121, 117, -115, 71, 74, -45, 111, 46, -82, 60, 45, 22, -95, 30, -95, 107, 109, 29, -57, -105, 29, -78,
				77, 105, 29, -54, 75, 4, -42, -5, -83, -83, 25, 92, -57, 110, 98, 114, -111, 60, 106, -23, -125, -27, -77, -41, -47, 63, 15, 60, 115, 97, 103, -90, -23, -6, 44, -105, 26, -28, -117, 111, 49, -118, 93, 127, 80, -69, -76, -72, 91, 123, -23, -121, -37, 34, -123, -18, 97, -107, -96, 88,
				35, -119, -56, 69, -75, -123, 54, 90, 58, -18, -7, -39, -115, 123, -107, -67, -19, -34, -81, 109, 45, -44, -74, -13, 67, -87, 91, -126, 38, -74, 44, 26, 59, -127, 20, 40, 90, 75, 98, -84, -2, 101, -76, -83, -52, 114, 72, 8, 110, 50, -54, -37, -106, -109, -61, 122, -68, -38, -115,
				-51, -44, 83, 91, 53, -80, -122, 47, -35, 65, 41, 34, 88, -2, 95, 46, 88, -98, 45, -33, -22, 76, -101, 94, 38, 87, 36, 110, 36, 16, 114, 43, 66, -27, 18, 68, -98, 59, -121, 125, -29, -49, 62, 68, 5, -60, -17, 110, 35, 9, -26, -55, 12, -114, 126, -25, -33, -74, -107, -117, 35, 55, 28,
				103, 109, 87, -46, 103, -74, -109, 73, -71, -79, -106, 83, 127, 61, -124, 114, -54, 117, 75, -123, -123, -84, 60, -57, 99, 116, -42, -65, 104, -115, -107, 34, 107, 52, -111, 33, 16, 21, -113, -55, -122, 56, -45, -51, -111, -47, -51, 114, 90, 93, -41, -10, 53, -70, -88, 103, -70, 73,
				100, -108, -91, -47, -110, 54, -73, 97, 25, 112, 18, 61, -110, -99, -110, 43, 43, 5, 82, 48, -54, -123, -121, -52, 36, 90, -20, 45, 111, -42, -10, -36, 27, -123, -113, 108, -85, -124, 10, 22, 71, -63, 31, 51, 58, -122, 56, 7, 110, 21, -121, -33, 0, -100, 12, -125, 84, -27, -128, -37,
				114, 36, 114, -124, -110, -128, -112, 9, 81, -58, 7, -53, -9, -127, 31, 47, 60, -125, -73, -109, -127, 95, 8, 66, 45, 68, 1, -7, 34, -79, 2, 24, 13, 98, 0, -89, 56, 0, 0, -1, -16, 100, -6, 57, 103, 44, -92, -111, -128, -67, 119, 112, 93, 71, -44, -4, -57, -14, -56, -55, 24, -28, -46,
				59, 36, -86, 89, 114, 14, 6, 58, 19, -49, 114, 121, 98, -93, 60, 30, 72, 60, 100, 98, -86, 25, -100, 43, 47, 59, -104, -114, 119, -32, -108, 24, 36, 18, 51, -72, 113, -112, 125, -58, -27, -63, -51, 95, -76, -80, -80, 123, 96, -104, -55, 12, 93, -95, 32, 56, 4, -25, 63, -69, -55, 92,
				30, -71, 35, 1, -104, -114, 67, 48, -84, -5, -5, 99, -122, -120, 0, 34, 40, 4, 81, -93, -108, 30, 98, -71, -5, -32, 22, 13, 38, -42, 17, -110, 119, -31, 89, -43, 16, 114, 107, -109, 91, 75, -85, 70, -71, -69, -113, -54, 62, 99, 100, -61, 25, 39, 105, -56, 46, -82, -92, -112, 31,
				-123, 108, 14, 14, 67, 5, 6, -68, -45, -57, 26, 66, 120, -97, 75, -72, -78, 105, -91, -73, 116, 95, 51, 108, 45, -27, -71, 108, 56, -7, 73, 12, 74, 2, 88, -70, -100, 17, -116, -100, 12, -118, -4, -52, -8, -43, -5, 58, 120, -85, -30, -41, -119, 116, -19, 11, 78, -72, -118, -38, -62,
				57, 34, -121, 81, -44, -75, 22, -108, 8, -84, -30, -100, 75, 57, -126, 104, -46, -31, 26, -22, 50, -123, 33, -114, 104, -122, -39, 10, -17, -62, -4, -11, 75, -30, 95, -122, -18, -66, 31, -4, 46, 79, -122, -42, -82, -70, -59, -75, -98, -97, 14, -97, 5, -27, -22, -57, 22, -7, -127, 16,
				79, 3, -83, -80, 72, -34, 57, 85, 54, 36, 97, 24, -55, -106, 105, 15, -33, 74, -4, -65, -15, 79, -128, 124, 27, -95, 104, -6, -107, -42, -87, -88, 105, -42, -34, 34, 123, -92, 104, 44, 22, -6, 25, 17, 35, -30, 71, 89, 33, 54, 98, 84, 64, 76, -116, 73, 46, 22, 49, 26, 49, 87, 44,
				-107, -13, -83, -27, -99, -116, 105, 58, -37, 53, -45, -52, -37, -110, 63, 39, 106, 90, 0, 126, 86, 62, 98, -99, -14, 35, 14, 97, 80, -69, 88, -110, -60, 101, 113, 84, -76, -69, 59, 89, 110, 26, 45, 67, 81, -109, 79, 83, -127, -10, -105, 86, 104, 91, 50, 42, 54, 124, -88, 101, -108,
				-82, -59, 119, 37, 80, -72, -112, -82, 85, -64, 106, -72, -98, 50, -15, 38, -125, -10, -101, 47, 12, -8, -85, -60, 118, 26, 108, -61, 100, -93, 79, -44, -75, 29, 50, 57, -63, 72, -124, -34, 100, 54, -73 });
		List<Vcdu> all = new ArrayList<>();
		all.add(previous);
		all.add(full);
		MeteorImage image = new MeteorImage(new PacketReassembly(all));
		TestUtil.assertImage("expectedPartial.png", image.toBufferedImage());
	}

	@Test
	public void testPacketCounterOverflow() throws Exception {
		Vcdu first = new Vcdu();
		first.readExternal(new byte[] { 64, 5, -28, 86, -42, 0, 0, 0, 0, 102, -84, -36, 93, 90, 121, -119, 27, 65, 18, 55, -50, -57, 36, -71, 118, -27, -71, -24, -66, -125, -6, 86, -84, 17, -58, -42, 23, 82, 74, 67, -103, 101, 44, 1, 7, 32, 1, -127, -45, -21, -8, 87, 47, 14, -108, 46, -82, 46, -110,
				48, 118, 70, 66, -15, -37, 28, 28, -27, -121, 124, -1, -100, 84, 13, -31, 43, -119, 44, -25, -71, 88, -53, -94, 77, -100, -105, 94, 15, 0, 112, 100, -1, 57, -84, 22, -16, -11, -56, -100, -82, -33, -105, 32, 54, 10, 49, 25, -57, -5, 126, -107, -1, 8, 65, 127, -4, 0, -101, 34, -71, 0,
				-29, -28, 12, 1, 69, 0, 0, 0, -1, -16, 96, -2, 24, -70, 112, 70, 7, -72, 61, 113, -12, -96, -126, -33, -120, -63, 1, 127, -6, -44, -128, 12, 5, 35, -112, 50, 70, 15, 20, -32, 6, 73, 32, -126, 15, 36, -114, -65, -91, 52, -96, 80, 113, -48, -116, -98, 58, 127, -100, -118, 10, -29, -80,
				11, -44, 100, 116, -6, 113, -17, 78, -37, -109, -125, -100, 28, -116, -123, -1, -21, 83, 6, -48, 57, 29, 56, 31, 41, -25, -23, -57, 20, -3, -96, 17, -14, -32, -11, 25, 29, 127, 79, 122, 110, 49, -109, -123, 0, 14, 1, 29, 63, 10, 118, 2, -128, 115, -128, 51, -56, 95, 110, -4, 82, 21,
				29, 2, -81, 29, -64, -28, 83, -126, -111, -106, -28, -128, 115, -62, -12, -3, 61, -88, 10, -128, 116, 56, 39, 36, 1, -41, -12, -81, 8, 65, 63, -3, 0, -105, 34, -71, 0, -29, -28, 12, 1, 69, 14, 0, 0, -1, -16, 96, -2, 25, -119, 1, -119, -61, 46, 122, 0, -67, 6, 125, 49, 75, -112, 19,
				110, -47, -110, 1, -58, 57, 20, -101, 87, -26, -32, -113, -88, -22, 63, 47, -58, -107, 84, 99, 35, 0, 14, 64, -37, -41, -4, -26, -109, -28, -25, 60, 96, -14, 8, -23, 78, 1, 112, 3, 112, -2, -95, 122, -2, -108, -20, 125, -18, -36, -32, 2, 58, -2, -108, -116, 56, 56, 4, 100, -15, -59,
				38, 2, -25, -27, -61, 103, 28, 1, -125, -17, -118, 78, 51, -127, -36, 114, 2, -13, 83, 32, 36, -112, 3, -114, 113, -128, 58, 126, -108, -13, -69, -125, -128, 9, -28, 100, 116, -1, 57, -92, -7, 125, -63, 60, -16, -66, -35, 15, 20, -86, 65, 92, 55, 32, 126, 32, 126, 56, -81, -1, 8, 65,
				63, -2, 0, -95, 34, -71, 0, -29, -28, 12, 1, 69, 28, 0, 0, -1, -16, 96, -2, 28, 88, -3, -33, -107, -109, 28, -127, -113, -2, -75, 3, 96, 59, 89, 120, 35, 0, 99, -98, -97, 79, -91, 3, 28, -128, 27, 4, -109, -115, -75, 35, 40, 11, -64, -54, -32, 115, -114, -97, -25, 21, 0, 57, 59, 78,
				-47, -114, 121, -2, -68, 123, 83, -78, -114, 49, -126, 10, -9, -57, 67, -7, 83, -108, -127, -100, 28, 123, 99, -89, -23, -11, -88, -8, 42, 112, -91, 72, 56, -31, 127, 14, 120, -10, -3, 41, -96, 47, 65, -110, -35, 50, 23, -89, -23, -19, -4, -88, 35, 118, -50, 8, 57, -25, 3, -4, -6,
				82, -19, 108, -25, 110, 65, 61, -127, 29, -2, -97, -123, 38, 7, 35, -89, 98, 118, -1, -11, -87, 2, -111, -72, -13, -112, 122, 16, 56, 20, -20, 1, -50, 48, 65, -57, 3, -81, -26, 43, 8, 65, 63, -1, 0, -85, 34, -71, 0, -29, -28, 12, 1, 69, 42, 0, 0, -1, -16, 96, -2, 27, 66, -100, -109,
				-73, 62, -121, 7, -100, -46, -123, 95, -105, -114, 15, 32, 20, -58, 125, -87, -22, 84, -112, 48, 73, 39, -5, -72, -2, -97, -25, 20, 22, 0, 40, 81, -98, -28, 109, -2, 124, 123, -44, -111, 100, -73, 66, 115, -44, 96, -4, -33, -90, 42, 82, 121, 36, -126, 79, 76, -29, -89, -31, -113, 74,
				78, 73, -38, 23, 60, -12, 10, 121, -10, -23, -19, 78, 86, 56, 85, -7, -70, 99, 1, 122, 126, -98, -43, 99, -27, 42, 56, 36, 2, 73, -62, -11, 62, -36, 84, 124, -87, -22, 121, -32, 113, -9, -72, -1, -11, -44, -116, 49, -126, 1, 81, -48, -15, -6, -13, 75, -111, -109, -98, -25, -126, 71,
				95, -13, -102, -115, 84, -100, -76, 103, 13, -48, 96, 117, -23, -2, 127, 26, 62, -23, 39, 110, 72, -28, 19, -98, 121, -23, -45, -21, 95, -1, 8, 65, 0, 0, 0, -87, 34, -71, 0, -29, -28, 12, 1, 69, 56, 0, 0, -1, -16, 96, -2, 33, 84, 124, -86, 66, 114, 121, 35, 28, -97, -46, -108, -88,
				111, -65, -110, 9, -20, -72, -57, -23, -17, -102, 112, 82, 27, -107, 112, 56, 0, -116, 127, -123, 53, -104, -85, 0, 23, 25, -32, 16, 58, -113, 126, 61, 41, 87, 0, -106, 3, -74, 57, 7, -114, 41, 48, 78, -32, 20, -66, 78, 65, -50, 51, -51, 38, 3, 100, -32, 117, -57, 32, 126, 93, 62,
				-75, 57, 27, 126, 80, -117, -76, -110, 64, 35, -89, 21, 26, 42, -20, 101, 42, 91 });
		Vcdu second = new Vcdu();
		second.readExternal(new byte[] { 64, 5, -28, 86, -41, 0, 0, 0, 0, 62, 113, -64, -56, -2, 116, -114, -92, 0, 2, -32, -127, -128, 66, -3, -31, -12, -57, -83, 32, -54, 19, -55, 83, -116, -113, -105, -89, -23, -17, 77, -112, 7, 56, 80, 0, -58, 1, -59, 1, 21, -47, -108, -116, -32, 100, -28, 117,
				-25, -65, 31, 90, 21, 72, -31, -128, 3, 57, 36, 15, -25, -59, 127, 8, 65, 0, 1, 0, -73, 34, -71, 0, -29, -28, 12, 1, 69, 70, 0, 0, -1, -16, 96, -2, 34, 37, 69, 104, -54, -94, -98, 9, -29, 29, 125, -1, -99, 64, -111, 2, -78, 59, -126, 6, 48, 48, 63, -49, -91, 17, -107, 108, -110, -92,
				0, 122, -123, -21, -57, 81, -59, 56, 64, -123, 25, 74, -98, 70, -30, 49, -45, -12, -89, 36, 74, 74, -19, 4, -28, 100, -126, -67, 125, 121, -57, -75, 40, -99, 3, -31, -63, 17, -9, 5, 122, 126, 24, -85, 33, 109, -16, -5, 83, 113, 61, 9, 92, 99, -97, -89, -79, -84, -7, 64, 47, -75, 120,
				80, 57, 59, 127, -6, -44, -59, 12, -60, 12, 103, 29, -10, -12, 31, -105, -72, -89, -104, -15, -69, -126, 51, -44, 99, 56, -1, 63, -46, -102, -72, -50, 1, 36, 99, -125, -116, -29, -37, 24, -10, -88, -92, 64, 14, 55, 113, -41, -127, -45, -97, -91, 92, -73, 10, -54, 80, -114, 121, 3,
				-125, -4, -15, 73, -26, 75, 18, 61, -74, 91, 110, 48, 65, 31, -3, 106, 8, 65, 0, 2, 0, -43, 34, -71, 0, -29, -28, 12, 1, 69, 84, 0, 0, -1, -16, 96, -2, 32, 45, -40, 7, 0, 6, 17, -80, -63, 27, 122, 123, -12, -87, -82, 74, -60, -56, 98, 96, 78, 114, -60, -81, 83, -97, -91, 93, -119,
				-46, -26, 23, 67, 27, 23, -58, 84, -28, -116, 119, 35, -45, -46, -86, -51, 9, -115, 85, -42, 54, -38, 70, 115, -114, 7, -23, -19, 84, -68, -80, -84, 21, -72, 3, 32, 100, 117, -29, -23, 87, 82, 76, 97, 93, 9, -12, 32, 28, -113, -45, -34, -76, 36, -105, 125, -109, 108, 35, -53, -35,
				-125, -14, -12, 56, -6, 115, -46, -95, 73, 90, -35, -42, 32, -19, 34, -128, 54, -112, -92, 126, -104, -1, 56, -83, 88, -91, 18, 18, -84, 66, -106, -56, 35, 111, 94, 61, 113, -17, 88, 102, -46, 69, 102, 100, 1, -105, 39, 4, 46, 63, -90, 105, -55, 120, -23, -9, -94, -23, -128, 72, -22,
				63, 74, -105, 112, 70, -110, 101, 125, -64, -115, -54, 66, 113, -55, -23, -125, 84, -28, -108, 72, 81, -112, 109, 108, 117, -38, 50, -33, -25, 21, 106, -34, -26, 68, 3, 115, 12, 96, -127, -14, -29, -37, -82, 62, -65, -28, 87, -1, 8, 65, 0, 3, 0, -39, 34, -71, 0, -29, -28, 12, 1, 69,
				98, 0, 0, -1, -16, 95, -4, 76, -102, -24, -54, -32, -17, 39, 28, 0, 7, -1, 90, -123, 23, -110, -85, 121, 81, -126, -92, 13, -32, 55, -21, 76, -98, -54, 97, 43, 103, 32, -104, -61, -87, 43, -58, 120, -10, -6, -2, 84, 89, -61, 9, 5, -91, 3, 12, 50, 120, 35, -7, 85, -101, 123, -87, 109,
				-128, 54, -73, 36, 24, -50, -28, 27, 122, 28, 123, -113, 115, 85, -102, -10, 121, -80, 27, -112, 9, -24, -100, -125, -7, 83, -91, 51, 64, -30, 59, -106, -36, 8, -54, -110, 56, -85, -111, -54, -105, 86, -23, 101, 38, 24, 121, -65, 41, 3, -90, 120, -24, 7, -45, -14, -86, -111, -37,
				-54, 93, -30, -13, -10, -87, 110, -91, 58, -29, -11, -85, 22, 80, 61, -43, -68, -112, -54, -54, 66, 0, 87, -116, 17, -48, 103, 61, -7, -59, 84, -116, -120, -90, 85, -115, -128, -36, -39, -63, 31, -30, 63, -50, 106, -33, -38, 46, 3, -92, -46, -79, -63, 56, 4, -88, 57, 29, 58, 98,
				-108, -69, -106, 50, 14, 64, 57, -36, 23, -1, -83, 90, 12, -81, 118, -112, 5, -120, 100, -93, 18, 11, 117, 24, -26, -65, -1, 8, 65, 0, 4, 0, -81, 34, -71, 0, -29, -28, 12, 1, 69, 112, 0, 0, -1, -16, 94, -4, 85, -66, -37, 20, -128, -29, 104, 61, -79, -46, -84, 42, -67, -60, 73, 25,
				-55, 85, 92, 1, -128, 56, -57, -1, -82, -82, 65, -91, -61, 101, 15, -104, -40, 46, 62, -96, -118, -86, -109, 9, 102, 36, 14, 1, -23, -116, 85, -120, -97, -49, -105, 44, 72, 0, 116, -59, 107, 24, 22, 59, 20, 120, -45, 14, 73, 0, -6, 127, -109, 84, 53, 73, 11, -62, -95, 64, 36, -116,
				30, 49, 89, -23, 31, 72, -56, -50, 7, 60, 98, -73, -68, 63, -31, -123, -68, 34, 89, -113, -105, 8, -63, 44, 70, 127, 26, -23, 83, 81, -73, -46, 45, 76, 54, 0, -122, 35, -26, -109, -100, -73, -32, 71, 21, -49, -22, -38, -5, 59, 18, 78, 2, -100, 31, 122, -54, -72, -44, -98, 117, 32,
				-109, -125, -8, -43, 103, -97, 40, 48, 57, 61, -15, -41, -38, -94, 18, -103, -80, 23, -128, 127, 90, 8, 65, 0, 5 });
		List<Vcdu> all = new ArrayList<>();
		all.add(first);
		all.add(second);
		MeteorImage image = new MeteorImage(new PacketReassembly(all));
		TestUtil.assertImage("expectedPacketCounterOverflow.png", image.toBufferedImage());
	}

	@Test
	public void testAssemblePacketBetweenVcdu() throws Exception {
		Vcdu v1 = new Vcdu();
		v1.readExternal(new byte[] { 64, 5, -24, 52, -13, 0, 0, 0, 0, 32, -108, 112, -8, -49, -65, -7, -12, -88, -91, 70, 88, -31, 117, 114, 87, 25, 39, -44, -45, 85, 36, -106, -20, 23, -62, 70, -84, 126, 108, 103, -16, -81, 8, 66, 18, -92, 0, -67, 34, -71, 2, -95, -64, 65, 3, -96, 112, 0, 0, -1,
				-16, 88, -13, 31, 50, 55, -124, 2, 48, -68, -127, -49, 81, -21, -19, 80, 34, 22, 87, 43, 33, 49, -86, -111, -64, -11, -88, -58, -12, -105, -114, 58, 3, -33, 7, -81, -14, -51, 43, -108, 17, 28, 12, -18, -32, 15, -88, -26, -104, 60, -95, 30, -43, 83, -13, 127, 8, 52, -115, -79, -19,
				-52, 126, 86, -48, 122, -88, 110, -65, -115, 60, -77, -53, 32, 105, -104, -128, -86, 21, 79, 92, 1, -46, -107, -18, 14, 29, 121, 10, -92, 103, -34, -101, 28, -79, -79, 44, -92, -125, -45, -89, 90, 122, 5, -106, 100, 25, -55, 67, -109, -38, -84, 70, -27, -40, -77, 46, 15, 99, 84, 53,
				4, 100, -72, 83, -69, -87, 1, 69, 77, -89, 64, -6, 71, -115, -30, -97, 85, -79, 99, 12, 100, 127, -53, 76, 109, 56, 7, 60, 117, -19, 93, -41, -121, 124, 91, 104, -14, 79, 5, -84, 102, -38, 47, 53, -99, -14, -52, -19, 41, 35, -82, 72, -29, -89, 79, 127, 106, 8, 66, 18, -91, 0, -15,
				34, -71, 2, -95, -64, 65, 3, -96, 126, 0, 0, -1, -16, 87, -53, -121, 91, 125, 103, 89, -114, 73, -31, -107, -93, 19, -20, -75, 10, 71, 81, -55, 39, 31, 76, -13, 94, -112, -91, 99, 79, 49, -109, 12, 57, -59, 80, 111, 58, 82, -49, -76, -116, -98, 57, 28, 98, -89, -73, -121, 108, 96,
				-14, -81, -41, 25, -49, 90, -28, 110, -4, 7, 107, 124, -13, 79, -88, -127, 115, 52, -124, -20, 97, -108, -37, -17, -128, -40, 39, -4, 43, -116, -65, -16, 66, -37, 94, -65, -39, -109, 63, 57, 81, 24, 57, -57, 78, -28, -5, -42, 112, -45, 38, -46, -18, -29, -72, -104, 109, 2, 54, -39,
				25, -58, 24, -113, 126, -35, 13, 97, 79, -5, -23, 51, -116, 51, -74, 91, -36, -6, -45, -66, -58, 23, 12, 71, -52, -96, -118, -122, 109, 34, 85, -68, -73, 17, -113, 54, -27, -101, -28, 32, -127, -126, 58, 123, 127, -6, -86, -13, -39, -49, 28, -113, 5, -53, 21, 114, 26, 88, -53, 16,
				71, -87, -23, -21, -127, 68, 54, -55, 28, 12, -50, 118, -28, 103, 111, 94, 127, -55, -84, -53, -69, -87, 52, -32, 37, -73, 96, 75, 29, -96, 109, -50, 15, -89, -29, -21, 93, 101, -49, -113, 82, -6, -57, -20, 83, -40, -4, -117, 10, -105, 113, 38, 75, 56, -23, -58, 6, 48, 121, -81, 8,
				66, 18, -90, 1, 45, 34, -71, 2, -95, -64, 65, 3, -96, -116, 0, 0, -1, -16, 86, -31, -68, 29, -86, 105, 122, 12, 127, 108, -44, -40, -83, -36, -53, -109, 41, 12, 112, 73, -27, 112, 1, -23, -57, 62, -2, -43, -36, -39, -22, 90, 51, 73, 46, -77, -26, -17, 107, -121, 88, 76, -125, 127,
				-55, -57, 11, -116, 115, -41, -46, -71, -83, 62, 70, -97, 90, -113, 81, 55, -63, -95, 73, 60, -101, 73, 60, -82, 6, 55, 110, 76, 125, 0, 57, 62, -75, -113, -88, -8, -116, 107, -79, -8, -121, 79, -106, 65, 105, 101, 18, -103, 22, 48, 55, 121, -110, -116, 96, 103, 0, -11, 30, -75, -85,
				-31, 45, 74, -41, 90, -16, -20, -38, 60, 50, -74, -40, 17, 68, -50, 65, -55, 36, -28, -114, 71, 111, -83, 112, 87, -56, 44, -82, -39, -92, -121, -49, -73, -34, 99, -37, -69, 105, 43, -110, 51, 94, -105, 115, -92, 71, -83, 105, 22, 48, -60, 126, -47, 108, -51, -78, 44, -115, -66, 81,
				24, 0, -11, 4, -32, 3, -11, -51, 119, 26, 21, -113, -40, -19, 4, 50, -99, -50, -93, 97, 56, -57, 31, -123, 65, 123, -31, -69, 27, -55, -29, -110, 72, -73, 45, -66, 10, -95, 99, -14, -100, -25, 61, 121, -24, 41, -10, 6, -37, -54, 83, 104, 127, -47, -43, -104, 103, -109, -126, 9, -56,
				-25, -98, -71, -82, 51, -58, 30, 32, -114, 77, 78, -35, -19, 38, -3, -3, -80, 33, 27, 105, -32, -14, 27, -88, -57, -89, -25, 92, 86, -97, 34, 59, -55, 53, -44, 102, 81, 59, 48, 69, -55, 92, -97, 92, -118, -52, 107, -95, -106, 8, 121, 39, -98, 41, 89, -57, -102, -88, 15, 0, -25, -21,
				95, 8, 66, 18, -89, 0, -77, 34, -71, 2, -95, -64, 65, 3, -96, -102, 0, 0, -1, -16, 85, -13, -120, 12, 51, -35, -61, 11, -65, -106, 100, -29, 113, 4, -19, 29, 51, 75, 119, 109, 29, -90, -96, -16, 51, 125, -52, 16, 113, -9, -127, -28, 31, 108, -116, 126, 116, -5, -121, 113, 18, 22, 92,
				43, -116, -114, 106, -92, 110, 80, -32, 26, -98, -32, -58, -38, 124, 69, 98, -37, 44, 121, 19, 73, -69, 59, -13, -45, -114, -35, 59, 86, 114, -87, 98, 91, 25, 24, -92 });

		Vcdu v2 = new Vcdu();
		v2.readExternal(new byte[] { 64, 5, -24, 52, -1, 0, 0, 0, 0, 110, -85, -49, 18, 61, -6, -38, -67, -100, 62, 94, -99, 96, -88, -49, -5, -46, -32, 47, -52, 79, 25, -119, 85, 121, 24, -3, -50, 79, 44, 107, 3, -30, 23, -118, -4, 37, -88, -8, -109, -61, 113, -24, -2, 21, 26, 41, -45, 44, 96, -76,
				-43, 95, -19, -113, 116, 101, -99, 115, -26, 77, -125, -116, 119, -7, 23, -114, 58, -41, -82, -2, -49, 62, 0, -8, 93, -15, 74, -63, 47, 117, -67, 41, 101, 58, 110, -82, -10, -38, -83, -13, 92, 76, -101, -83, -34, -43, -42, 51, -80, 48, -23, 42, 22, -62, -27, -114, 113, -112, 43, -1,
				8, 64, 18, -31, 1, -97, 34, -71, 2, -95, -55, -32, 0, -47, -102, 0, 0, -1, -16, 95, -109, -62, -98, 9, -109, -61, -33, 4, -68, 93, -32, 61, 46, 99, -25, 77, -88, 74, -74, 86, -91, 127, -43, -59, 20, 113, 48, 92, -109, -126, 100, -34, -68, -109, -107, -49, -74, 43, -50, 46, -2, 10,
				-24, -66, 9, -8, -73, -31, -49, 26, 95, 104, -117, -3, -97, -88, 94, -83, -83, -99, -118, 78, -60, -117, -127, 110, -78, 44, -123, -73, -106, -5, -28, -110, 8, 11, -14, -13, -63, -81, 74, -16, 55, -128, -66, 29, -8, -9, -29, -50, -111, 127, 117, 102, -41, 126, 26, -15, 60, 119, -59,
				-93, 73, 38, -116, 44, -80, 50, 33, -105, -126, 28, -14, -52, 113, -123, 31, 90, -50, -1, -123, 49, -81, -8, 51, 77, -15, -2, -101, 23, -119, -127, -16, -89, -128, -4, 76, -13, 106, 26, 49, -78, 95, -100, -54, -94, 39, 95, 52, -71, -109, 62, 91, 47, 32, -73, -34, -20, 114, 107, -27,
				111, 26, -22, 54, -73, -6, -27, -44, 122, 14, -100, 108, -76, -40, -17, -91, -110, -62, -60, -50, 100, -14, 21, -49, 35, 115, 124, -51, -48, 28, -97, 74, -55, 123, -61, 102, -10, 126, 33, -78, 92, 77, 107, 112, 24, 41, -20, -61, -95, -25, -125, -21, -46, -66, -82, -3, -107, 124, 59,
				-31, -97, 27, 124, 23, -8, -103, 61, -107, -47, -44, -75, -19, 111, 74, -123, -41, 67, 41, 36, 36, -64, 62, 121, 39, -13, -55, 84, 27, -103, 102, 59, 56, 35, 103, 0, -126, 43, -62, 62, 16, -4, 36, -15, 85, -25, -58, 72, 52, 40, -12, -62, -13, 37, -101, 79, 2, -7, -56, 54, -121, 80,
				34, 99, -13, -29, -17, 58, -16, 79, 126, 123, -43, 47, -38, 6, -17, 85, 109, 116, 120, 126, -3, -61, 91, -23, 119, 23, 54, -10, 103, 43, -48, 76, -27, -121, -53, -2, -37, 51, 100, -109, -9, -15, -4, 56, -81, 60, -2, -50, 89, 93, 35, 83, -53, 54, -48, 58, 114, 127, 26, -112, -24,
				-106, -5, -50, -20, -123, 83, -55, -1, 38, -109, 85, -119, -20, 80, 73, 101, 112, 66, 21, 10, -55, -80, 118, -9, 62, -26, -99, -90, -25, 83, -110, 35, -26, 18, 0, 2, 71, 11, -9, 127, -58, -84, -33, -39, 121, 17, -86, -92, 4, 16, 112, -60, 62, 120, -49, 94, -66, -30, -65, 8, 64, 18,
				-30, 0, -17, 34, -71, 2, -95, -55, -32, 0, -47, -88, 0, 0, -1, -16, 95, -8, -120, -38, 37, -79, 44, 23, -88, -56, 80, 122, 0, 125, 106, 89, 20, 7, -35, -63, 0, -32, 96, 98, -84, 89, -19, 88, -39, 84, 16, 73, 4, 15, 106, -24, -4, 61, 111, -78, 44, -10, 98, 58, -41, 67, 12, -92, 93,
				-92, -99, 10, -9, -21, -51, 85, -70, -123, -2, -34, 92, -66, -20, -79, 39, -116, 99, -4, 105, -70, 98, -81, -38, 30, -36, -79, 36, 54, 84, -127, 93, -65, -61, -3, 58, 107, -5, -28, -118, 21, 33, -125, 3, -69, 63, -97, 127, 122, -23, -65, 104, 125, 51, -5, 59, 67, -47, -40, 46, -42,
				104, 78, -30, 78, 125, 7, 76, -5, 126, -75, -30, 90, 81, -5, 70, -82, -57, 110, 67, 72, 64, 25, -6, -42, -33, -114, -4, 59, -73, 69, -115, -62, -100, 74, -27, -114, 15, 117, 4, 30, -11, -25, -70, -58, -103, 36, -74, -106, 123, 6, 67, -50, -62, 76, -100, 96, -116, 99, -65, 60, 19, 95,
				109, 126, -50, 126, 0, -75, -43, -65, 103, -53, 45, 48, 2, 95, 82, -115, -30, 97, -110, 50, -84, 14, 71, -34, 29, 0, 60, -15, -102, -65, -30, 63, 25, -34, -24, 95, 11, 97, -47, 62, -48, 74, -38, 36, -47, -64, -37, 0, 27, 87, -114, -104, 63, -87, 53, 8, 64, -110, -29, 1, 29, 34, -71,
				2, -95, -55, -32, 0, -47, -74, 0, 0, -1, -16, 95, -7, -41, -60, 30, 35, 107, 123, 75, -101, -58, 98, 100, 12, -52, 23, 29, -55, 61, -15, -22, 107, -118, -47, 46, -58, -93, 37, -59, -3, -65, 124, -17, 92, 118, -35, -116, -28, -41, -89, -4, 53, 72, 109, 116, 13, 119, 83, -78, -78, 88,
				34, -98, 4, -38, -66, 97, 111, 44, -119, 6, 58, -14, -35, 5, 123, 103, -128, 62, 21, -40, 55, -128, -76, -99, 125, -122, 103, 55, -90, -27, -71, 111, -70, -48 });

		Vcdu v3 = new Vcdu();
		v3.readExternal(new byte[] { 64, 5, -24, 53, 0, 0, 0, 0, 0, -68, -107, -49, -33, -57, 83, -23, -97, 106, -21, 53, -81, 4, 105, 90, 14, -107, -90, -21, 82, 100, -125, 9, -40, -71, 97, -110, -64, 41, -25, 113, -2, 85, -56, 124, 91, -41, 47, -4, 21, -32, 91, 27, -21, 70, -38, 88, -58, -111,
				-100, 41, -62, 100, -6, -125, -98, -98, -107, -64, 124, 83, -15, -90, -105, -15, 23, -32, -15, 123, -112, 69, -28, 82, 54, -59, 33, -15, -98, -99, 66, -94, -98, -75, -13, 37, -10, -97, 36, 3, -25, 3, 113, 99, -110, 72, -1, 26, -95, 117, 25, -27, -120, 35, 53, 24, 98, 70, 122, 13,
				-93, 25, 53, 127, 70, 63, -68, 83, -37, 60, -29, -36, 87, -95, -4, 27, -72, -122, -49, -59, -48, 95, 78, 72, 69, 44, 9, 25, -49, 35, 29, -71, -17, 93, -106, -109, -32, -97, -19, 127, -121, -105, 62, 41, -13, -126, -29, 80, -122, -37, 105, 95, 86, 64, 78, 119, -113, -17, -114, -33,
				-115, 121, -2, -94, -111, -90, -93, 49, -124, 15, 40, 92, -112, -69, 78, 70, -36, -110, 63, 74, 8, 65, 82, -28, 0, -5, 34, -71, 2, -95, -55, -32, 0, -47, 0, 0, 0, -1, -16, 95, 34, 65, 26, 21, 7, -122, -55, -21, -42, -82, -38, -78, -19, 1, 73, -57, -46, -87, -22, -9, -19, 6, -93, 99,
				107, 30, 114, -49, 35, 16, 61, 2, -1, -11, -22, -9, -122, 47, 102, -73, -47, -84, -18, -89, -112, -76, -23, -72, 100, -15, -53, 2, 9, -2, 117, 14, -123, 126, -105, -105, 82, -22, -2, 97, 1, -29, 69, -115, 72, -18, 115, -2, 127, 10, -22, -12, 56, -30, -72, -118, 91, 125, -39, 38, 94,
				-121, -79, 28, -42, 39, -115, -18, 30, 125, 67, 74, -73, 87, 33, -90, -72, -99, -105, -35, 86, 22, 25, -1, 62, -75, 79, -61, -6, 92, 122, 7, -125, -83, -30, 4, -17, -108, 70, 9, 61, -40, -114, 123, -5, 81, -30, 56, -90, -67, -98, 11, 72, -50, -24, 100, -108, -122, 82, 120, -63, 83,
				83, -38, -64, 35, -43, 46, -26, 22, -96, -87, 17, 34, -88, 126, 88, -87, 109, -33, -112, -83, -85, -119, -115, -80, -75, 117, 66, 89, 67, -88, 0, -3, -48, 121, -3, 49, -6, 85, 85, -126, -38, 84, -102, -29, -54, 36, -14, -5, -125, 119, 35, 29, 62, -108, -106, -9, 107, 28, -46, 57, 5,
				-43, -29, 80, -118, 14, 56, -49, 60, -10, -85, -79, 78, -51, 122, -41, -6, -118, 38, 22, -40, 110, 96, -35, -55, -29, -127, -41, -127, -6, 87, -1, 8, 65, 18, -27, 1, -121, 34, -71, 2, -95, -55, -32, 0, -47, 14, 0, 0, -1, -16, 96, -7, 51, -10, -69, -3, -96, 83, -62, -6, 52, -6, 103,
				-122, 60, 89, 20, 126, 51, -72, -67, 84, 11, 10, -27, -30, -74, 77, -7, -55, 35, 104, 37, -54, -114, 121, 32, -102, -27, -65, 98, 15, 22, -53, -81, -24, 94, 44, -79, -44, 37, -98, -22, -7, -75, 19, 121, 60, -84, 65, -13, 12, -127, 126, 99, -12, -14, -49, 30, -11, -6, 17, -88, 52,
				-106, 102, 54, -77, 12, -13, 73, -14, -92, 0, 0, 88, -123, 39, 59, -55, -64, -17, 87, 27, 84, -45, 98, -45, -18, -28, -102, 57, 45, 68, 43, -72, 23, -56, 11, -127, -49, 126, -39, 60, -41, 7, -91, 106, 90, -114, -81, -91, -35, 106, -83, 0, 64, -46, -54, -111, 0, -21, -5, -59, -1,
				-106, 109, -114, -37, -108, 41, -57, 81, 93, -121, -38, -35, 108, 90, -26, -30, 127, 49, 85, -56, -120, 42, 15, -108, 99, -26, 7, -13, 31, -25, 53, -50, 92, 105, 115, -35, -36, 105, -112, 13, 68, 91, 88, 51, 51, -53, 110, -86, 63, 124, -27, 88, 12, -74, 114, 8, -38, 122, 117, -29,
				-46, -69, 8, 45, -82, -84, -19, -91, -71, -110, 5, -116, 121, 94, 99, -77, 76, 14, 114, 56, -29, 61, -7, 30, -43, -49, -22, -42, -42, -102, -102, -37, -99, 66, -39, -124, -106, -28, -55, 19, 43, -97, -110, 66, 78, 73, -25, -111, -110, 120, -23, -51, 106, -40, -61, 13, -75, -109, -81,
				-112, -80, 65, 18, 42, 121, -96, -18, -13, 20, -6, 12, -15, -50, 5, 102, -34, -120, 116, 89, 116, -99, 62, -34, 9, 117, 81, 123, 117, 59, 60, -101, -10, 121, 76, -52, -60, 112, 73, -32, 13, -61, -113, 76, -9, -86, 26, 116, -74, -16, -36, -51, 29, -72, 104, 103, -76, -112, 35, 46, -3,
				-58, 38, -56, -62, -29, 56, -58, 8, -25, -67, 73, -81, 37, -28, 115, -83, -123, -69, 60, 50, 16, -56, 46, 36, 0, -120, -50, 58, -107, -49, -82, 79, -4, 7, -36, 81, 28, -15, -35, -8, 112, 72, -58, -34, 123, -84, -60, -54, -53, 41, 2, 73, 80, -125, -116, -12, 31, 50, -29, 61, -9, 123,
				87, -1, 8, 65, 18, -26, 1, -107, 34, -71, 2, -95, -55, -32, 0, -47, 28, 0, 0, -1, -16, 96, -34, -68, 45, 121, 97, 115, -90, -71, -119, -60, -128, 79, 35, -18, -63, 71, 39, -27 });

		List<Vcdu> all = new ArrayList<>();
		all.add(v1);
		all.add(v2);
		all.add(v3);

		PacketReassembly packets = new PacketReassembly(all);
		Packet split = findBySequenceCount(packets, 4835);
		assertNotNull(split);
		assertEquals(split.getUserData().length, split.getUserDataLength());
	}

	@Test(expected = UncorrectableException.class)
	public void testCorruptedData() throws Exception {
		Vcdu vcdu = new Vcdu();
		vcdu.readExternal(new byte[] { 64, 63, 0, 6, 80, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 });
	}

	private static Packet findBySequenceCount(PacketReassembly packets, int expected) {
		while (packets.hasNext()) {
			Packet cur = packets.next();
			if (cur.getPrimaryHeader().getSequenceCount() == expected) {
				return cur;
			}
		}
		return null;
	}

	private static List<Vcdu> readVcdu() throws Exception {
		byte[] vcduData = toBytes("vcdu.bin");
		Vcdu vcdu = new Vcdu();
		vcdu.readExternal(vcduData);
		List<Vcdu> data = new ArrayList<>();
		data.add(vcdu);
		return data;
	}

	@Test
	public void testNoImage() throws Exception {
		MeteorImage image = new MeteorImage(new PacketReassembly(new ArrayList<>()));
		assertNull(image.toBufferedImage());
	}

	public static byte[] toBytes(String source) throws IOException {
		InputStream is = MeteorImageTest.class.getClassLoader().getResourceAsStream(source);
		if (is == null) {
			throw new IllegalArgumentException("cannot find in classpath: " + source);
		}
		byte[] buffer = IOUtils.toByteArray(is);
		is.close();
		return buffer;
	}

}
