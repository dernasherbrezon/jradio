package ru.r2cloud.jradio.meteor;

import static org.junit.Assert.assertNull;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.junit.Test;

import ru.r2cloud.jradio.TestUtil;
import ru.r2cloud.jradio.lrpt.PacketReassembly;
import ru.r2cloud.jradio.lrpt.Vcdu;

public class MeteorImageTest {

	@Test
	public void success() throws Exception {
		MeteorImage image = new MeteorImage(new PacketReassembly(readVcdu()));
		TestUtil.assertImage("expected8bitsoft.png", image.toBufferedImage());
	}

	@Test
	public void testUnknownAPID() throws Exception {
		MeteorImage image = new MeteorImage(new PacketReassembly(readVcdu()));
		assertNull(image.toBufferedImage(1, 2, 3)); // not random. explicitly unknown apid
	}

	@Test
	public void testRecoverPartialPacket() throws Exception {
		Vcdu previous = new Vcdu();
		previous.readExternal(new byte[] { 64, 5, 103, -120, 67, 0, 0, 0, 1, -82, -87, 36, 34, -37, -53, -75, -73, -68, -110, -11, -119, -74, 120, 89, 60, -72, -123, -76, -47, 29, -111, 66, 9, 71, 27, 90, 121, -111, 18, -67, -29, -63, 31, 26, 53, 29, 63, 80, -66, -45, 53, -69, 123, 95, 16, 120, 123,
				83, -71, -123, -82, -20, 36, 73, 46, 103, -115, -18, 18, 56, -18, -97, 78, -115, -30, -103, 37, -104, -51, -2, -111, 36, 87, 49, 8, 103, 111, 52, 21, 67, 34, 10, -77, -30, -101, -69, 121, 117, -115, 71, 74, -45, 111, 46, -82, 60, 45, 22, -95, 30, -95, 107, 109, 29, -57, -105, 29,
				-78, 77, 105, 29, -54, 75, 4, -42, -5, -83, -83, 25, 92, -57, 110, 98, 114, -111, 60, 106, -23, -125, -27, -77, -41, -47, 63, 15, 60, 115, 97, 103, -90, -23, -6, 44, -105, 26, -28, -117, 111, 49, -118, 93, 127, 80, -69, -76, -72, 91, 123, -23, -121, -37, 34, -123, -18, 97, -107, -96,
				88, 35, -119, -56, 69, -75, -123, 54, 90, 58, -18, -7, -39, -115, 123, -107, -67, -19, -34, -81, 109, 45, -44, -74, -13, 67, -87, 91, -126, 38, -74, 44, 26, 59, -127, 20, 40, 90, 75, 98, -84, -2, 101, -76, -83, -52, 114, 72, 8, 110, 50, -54, -37, -106, -109, -61, 122, -68, -38, -115,
				-51, -44, 83, 91, 53, -80, -122, 47, -35, 65, 41, 34, 88, -2, 95, 46, 88, -98, 45, -33, -22, 76, -101, 94, 38, 87, 36, 110, 36, 16, 114, 43, 66, -27, 18, 68, -98, 59, -121, 125, -29, -49, 62, 68, 5, -60, -17, 110, 35, 9, -26, -55, 12, -114, 126, -25, -33, -74, -107, -117, 35, 55, 28,
				103, 109, 87, -46, 103, -74, -109, 73, -71, -79, -106, 83, 127, 61, -124, 114, -54, 117, 75, -123, -123, -84, 60, -57, 99, 116, -42, -65, 104, -115, -107, 34, 107, 52, -111, 33, 16, 21, -113, -55, -122, 56, -45, -51, -111, -47, -51, 114, 90, 93, -41, -10, 53, -70, -88, 103, -70, 73,
				100, -108, -91, -47, -110, 54, -73, 97, 25, 112, 18, 61, -110, -99, -110, 43, 43, 5, 82, 48, -54, -123, -121, -52, 36, 90, -20, 45, 111, -42, -10, -36, 27, -123, -113, 108, -85, -124, 10, 22, 71, -63, 31, 51, 58, -122, 56, 7, 110, 21, -121, -33, 0, -100, 12, -125, 84, -27, -128, -37,
				114, 36, 114, -124, -110, -128, -112, 9, 81, -58, 7, -53, -9, -127, 31, 47, 60, -125, -73, -109, -127, 95, 8, 66, 45, 68, 1, -7, 34, -79, 2, 24, 13, 98, 0, -89, 56, 0, 0, -1, -16, 100, -6, 57, 103, 44, -92, -111, -128, -67, 119, 112, 93, 71, -44, -4, -57, -14, -56, -55, 24, -28, -46,
				59, 36, -86, 89, 114, 14, 6, 58, 19, -49, 114, 121, 98, -93, 60, 30, 72, 60, 100, 98, -86, 25, -100, 43, 47, 59, -104, -114, 119, -32, -108, 24, 36, 18, 51, -72, 113, -112, 125, -58, -27, -63, -51, 95, -76, -80, -80, 123, 96, -104, -55, 12, 93, -95, 32, 56, 4, -25, 63, -69, -55, 92,
				30, -71, 35, 1, -104, -114, 67, 48, -84, -5, -5, 99, -122, -120, 0, 34, 40, 4, 81, -93, -108, 30, 98, -71, -5, -32, 22, 13, 38, -42, 17, -110, 119, -31, 89, -43, 16, 114, 107, -109, 91, 75, -85, 70, -71, -69, -113, -54, 62, 99, 100, -61, 25, 39, 105, -56, 46, -82, -92, -112, 31,
				-123, 108, 14, 14, 67, 5, 6, -68, -45, -57, 26, 66, 120, -97, 75, -72, -78, 105, -91, -73, 116, 95, 51, 108, 45, -27, -71, 108, 56, -7, 73, 12, 74, 2, 88, -70, -100, 17, -116, -100, 12, -118, -4, -52, -8, -43, -5, 58, 120, -85, -30, -41, -119, 116, -19, 11, 78, -72, -118, -38, -62,
				57, 34, -121, 81, -44, -75, 22, -108, 8, -84, -30, -100, 75, 57, -126, 104, -46, -31, 26, -22, 50, -123, 33, -114, 104, -122, -39, 10, -17, -62, -4, -11, 75, -30, 95, -122, -18, -66, 31, -4, 46, 79, -122, -42, -82, -70, -59, -75, -98, -97, 14, -97, 5, -27, -22, -57, 22, -7, -127, 16,
				79, 3, -83, -80, 72, -34, 57, 85, 54, 36, 97, 24, -55, -106, 105, 15, -33, 74, -4, -65, -15, 79, -128, 124, 27, -95, 104, -6, -107, -42, -87, -88, 105, -42, -34, 34, 123, -92, 104, 44, 22, -6, 25, 17, 35, -30, 71, 89, 33, 54, 98, 84, 64, 76, -116, 73, 46, 22, 49, 26, 49, 87, 44,
				-107, -13, -83, -27, -99, -116, 105, 58, -37, 53, -45, -52, -37, -110, 63, 39, 106, 90, 0, 126, 86, 62, 98, -99, -14, 35, 14, 97, 80, -69, 88, -110, -60, 101, 113, 84, -76, -69, 59, 89, 110, 26, 45, 67, 81, -109, 79, 83, -127, -10, -105, 86, 104, 91, 50, 42, 54, 124, -88, 101, -108,
				-82, -59, 119, 37, 80, -72, -112, -82, 85, -64, 106, -72, -98, 50, -15, 38, -125, -10, -101, 47, 12, -8, -85, -60, 118, 26, 108, -61, 100, -93, 79, -44, -75, 29, 50, 57, -63, 72, -124, -34, 100, 54, -73 });
		Vcdu full = new Vcdu();
		full.readExternal(new byte[] { 64, 5, 103, -120, 67, 0, 0, 0, 1, -82, -87, 36, 34, -37, -53, -75, -73, -68, -110, -11, -119, -74, 120, 89, 60, -72, -123, -76, -47, 29, -111, 66, 9, 71, 27, 90, 121, -111, 18, -67, -29, -63, 31, 26, 53, 29, 63, 80, -66, -45, 53, -69, 123, 95, 16, 120, 123, 83,
				-71, -123, -82, -20, 36, 73, 46, 103, -115, -18, 18, 56, -18, -97, 78, -115, -30, -103, 37, -104, -51, -2, -111, 36, 87, 49, 8, 103, 111, 52, 21, 67, 34, 10, -77, -30, -101, -69, 121, 117, -115, 71, 74, -45, 111, 46, -82, 60, 45, 22, -95, 30, -95, 107, 109, 29, -57, -105, 29, -78,
				77, 105, 29, -54, 75, 4, -42, -5, -83, -83, 25, 92, -57, 110, 98, 114, -111, 60, 106, -23, -125, -27, -77, -41, -47, 63, 15, 60, 115, 97, 103, -90, -23, -6, 44, -105, 26, -28, -117, 111, 49, -118, 93, 127, 80, -69, -76, -72, 91, 123, -23, -121, -37, 34, -123, -18, 97, -107, -96, 88,
				35, -119, -56, 69, -75, -123, 54, 90, 58, -18, -7, -39, -115, 123, -107, -67, -19, -34, -81, 109, 45, -44, -74, -13, 67, -87, 91, -126, 38, -74, 44, 26, 59, -127, 20, 40, 90, 75, 98, -84, -2, 101, -76, -83, -52, 114, 72, 8, 110, 50, -54, -37, -106, -109, -61, 122, -68, -38, -115,
				-51, -44, 83, 91, 53, -80, -122, 47, -35, 65, 41, 34, 88, -2, 95, 46, 88, -98, 45, -33, -22, 76, -101, 94, 38, 87, 36, 110, 36, 16, 114, 43, 66, -27, 18, 68, -98, 59, -121, 125, -29, -49, 62, 68, 5, -60, -17, 110, 35, 9, -26, -55, 12, -114, 126, -25, -33, -74, -107, -117, 35, 55, 28,
				103, 109, 87, -46, 103, -74, -109, 73, -71, -79, -106, 83, 127, 61, -124, 114, -54, 117, 75, -123, -123, -84, 60, -57, 99, 116, -42, -65, 104, -115, -107, 34, 107, 52, -111, 33, 16, 21, -113, -55, -122, 56, -45, -51, -111, -47, -51, 114, 90, 93, -41, -10, 53, -70, -88, 103, -70, 73,
				100, -108, -91, -47, -110, 54, -73, 97, 25, 112, 18, 61, -110, -99, -110, 43, 43, 5, 82, 48, -54, -123, -121, -52, 36, 90, -20, 45, 111, -42, -10, -36, 27, -123, -113, 108, -85, -124, 10, 22, 71, -63, 31, 51, 58, -122, 56, 7, 110, 21, -121, -33, 0, -100, 12, -125, 84, -27, -128, -37,
				114, 36, 114, -124, -110, -128, -112, 9, 81, -58, 7, -53, -9, -127, 31, 47, 60, -125, -73, -109, -127, 95, 8, 66, 45, 68, 1, -7, 34, -79, 2, 24, 13, 98, 0, -89, 56, 0, 0, -1, -16, 100, -6, 57, 103, 44, -92, -111, -128, -67, 119, 112, 93, 71, -44, -4, -57, -14, -56, -55, 24, -28, -46,
				59, 36, -86, 89, 114, 14, 6, 58, 19, -49, 114, 121, 98, -93, 60, 30, 72, 60, 100, 98, -86, 25, -100, 43, 47, 59, -104, -114, 119, -32, -108, 24, 36, 18, 51, -72, 113, -112, 125, -58, -27, -63, -51, 95, -76, -80, -80, 123, 96, -104, -55, 12, 93, -95, 32, 56, 4, -25, 63, -69, -55, 92,
				30, -71, 35, 1, -104, -114, 67, 48, -84, -5, -5, 99, -122, -120, 0, 34, 40, 4, 81, -93, -108, 30, 98, -71, -5, -32, 22, 13, 38, -42, 17, -110, 119, -31, 89, -43, 16, 114, 107, -109, 91, 75, -85, 70, -71, -69, -113, -54, 62, 99, 100, -61, 25, 39, 105, -56, 46, -82, -92, -112, 31,
				-123, 108, 14, 14, 67, 5, 6, -68, -45, -57, 26, 66, 120, -97, 75, -72, -78, 105, -91, -73, 116, 95, 51, 108, 45, -27, -71, 108, 56, -7, 73, 12, 74, 2, 88, -70, -100, 17, -116, -100, 12, -118, -4, -52, -8, -43, -5, 58, 120, -85, -30, -41, -119, 116, -19, 11, 78, -72, -118, -38, -62,
				57, 34, -121, 81, -44, -75, 22, -108, 8, -84, -30, -100, 75, 57, -126, 104, -46, -31, 26, -22, 50, -123, 33, -114, 104, -122, -39, 10, -17, -62, -4, -11, 75, -30, 95, -122, -18, -66, 31, -4, 46, 79, -122, -42, -82, -70, -59, -75, -98, -97, 14, -97, 5, -27, -22, -57, 22, -7, -127, 16,
				79, 3, -83, -80, 72, -34, 57, 85, 54, 36, 97, 24, -55, -106, 105, 15, -33, 74, -4, -65, -15, 79, -128, 124, 27, -95, 104, -6, -107, -42, -87, -88, 105, -42, -34, 34, 123, -92, 104, 44, 22, -6, 25, 17, 35, -30, 71, 89, 33, 54, 98, 84, 64, 76, -116, 73, 46, 22, 49, 26, 49, 87, 44,
				-107, -13, -83, -27, -99, -116, 105, 58, -37, 53, -45, -52, -37, -110, 63, 39, 106, 90, 0, 126, 86, 62, 98, -99, -14, 35, 14, 97, 80, -69, 88, -110, -60, 101, 113, 84, -76, -69, 59, 89, 110, 26, 45, 67, 81, -109, 79, 83, -127, -10, -105, 86, 104, 91, 50, 42, 54, 124, -88, 101, -108,
				-82, -59, 119, 37, 80, -72, -112, -82, 85, -64, 106, -72, -98, 50, -15, 38, -125, -10, -101, 47, 12, -8, -85, -60, 118, 26, 108, -61, 100, -93, 79, -44, -75, 29, 50, 57, -63, 72, -124, -34, 100, 54, -73 });
		List<Vcdu> all = new ArrayList<>();
		all.add(previous);
		all.add(full);
		MeteorImage image = new MeteorImage(new PacketReassembly(all));
		TestUtil.assertImage("expectedPartial.png", image.toBufferedImage());
	}

	@Test
	public void testPacketCounterOverflow() throws Exception {
		Vcdu first = new Vcdu();
		first.readExternal(new byte[] { 64, 5, -28, 86, -42, 0, 0, 0, 0, 102, -84, -36, 93, 90, 121, -119, 27, 65, 18, 55, -50, -57, 36, -71, 118, -27, -71, -24, -66, -125, -6, 86, -84, 17, -58, -42, 23, 82, 74, 67, -103, 101, 44, 1, 7, 32, 1, -127, -45, -21, -8, 87, 47, 14, -108, 46, -82, 46, -110,
				48, 118, 70, 66, -15, -37, 28, 28, -27, -121, 124, -1, -100, 84, 13, -31, 43, -119, 44, -25, -71, 88, -53, -94, 77, -100, -105, 94, 15, 0, 112, 100, -1, 57, -84, 22, -16, -11, -56, -100, -82, -33, -105, 32, 54, 10, 49, 25, -57, -5, 126, -107, -1, 8, 65, 127, -4, 0, -101, 34, -71, 0,
				-29, -28, 12, 1, 69, 0, 0, 0, -1, -16, 96, -2, 24, -70, 112, 70, 7, -72, 61, 113, -12, -96, -126, -33, -120, -63, 1, 127, -6, -44, -128, 12, 5, 35, -112, 50, 70, 15, 20, -32, 6, 73, 32, -126, 15, 36, -114, -65, -91, 52, -96, 80, 113, -48, -116, -98, 58, 127, -100, -118, 10, -29, -80,
				11, -44, 100, 116, -6, 113, -17, 78, -37, -109, -125, -100, 28, -116, -123, -1, -21, 83, 6, -48, 57, 29, 56, 31, 41, -25, -23, -57, 20, -3, -96, 17, -14, -32, -11, 25, 29, 127, 79, 122, 110, 49, -109, -123, 0, 14, 1, 29, 63, 10, 118, 2, -128, 115, -128, 51, -56, 95, 110, -4, 82, 21,
				29, 2, -81, 29, -64, -28, 83, -126, -111, -106, -28, -128, 115, -62, -12, -3, 61, -88, 10, -128, 116, 56, 39, 36, 1, -41, -12, -81, 8, 65, 63, -3, 0, -105, 34, -71, 0, -29, -28, 12, 1, 69, 14, 0, 0, -1, -16, 96, -2, 25, -119, 1, -119, -61, 46, 122, 0, -67, 6, 125, 49, 75, -112, 19,
				110, -47, -110, 1, -58, 57, 20, -101, 87, -26, -32, -113, -88, -22, 63, 47, -58, -107, 84, 99, 35, 0, 14, 64, -37, -41, -4, -26, -109, -28, -25, 60, 96, -14, 8, -23, 78, 1, 112, 3, 112, -2, -95, 122, -2, -108, -20, 125, -18, -36, -32, 2, 58, -2, -108, -116, 56, 56, 4, 100, -15, -59,
				38, 2, -25, -27, -61, 103, 28, 1, -125, -17, -118, 78, 51, -127, -36, 114, 2, -13, 83, 32, 36, -112, 3, -114, 113, -128, 58, 126, -108, -13, -69, -125, -128, 9, -28, 100, 116, -1, 57, -92, -7, 125, -63, 60, -16, -66, -35, 15, 20, -86, 65, 92, 55, 32, 126, 32, 126, 56, -81, -1, 8, 65,
				63, -2, 0, -95, 34, -71, 0, -29, -28, 12, 1, 69, 28, 0, 0, -1, -16, 96, -2, 28, 88, -3, -33, -107, -109, 28, -127, -113, -2, -75, 3, 96, 59, 89, 120, 35, 0, 99, -98, -97, 79, -91, 3, 28, -128, 27, 4, -109, -115, -75, 35, 40, 11, -64, -54, -32, 115, -114, -97, -25, 21, 0, 57, 59, 78,
				-47, -114, 121, -2, -68, 123, 83, -78, -114, 49, -126, 10, -9, -57, 67, -7, 83, -108, -127, -100, 28, 123, 99, -89, -23, -11, -88, -8, 42, 112, -91, 72, 56, -31, 127, 14, 120, -10, -3, 41, -96, 47, 65, -110, -35, 50, 23, -89, -23, -19, -4, -88, 35, 118, -50, 8, 57, -25, 3, -4, -6,
				82, -19, 108, -25, 110, 65, 61, -127, 29, -2, -97, -123, 38, 7, 35, -89, 98, 118, -1, -11, -87, 2, -111, -72, -13, -112, 122, 16, 56, 20, -20, 1, -50, 48, 65, -57, 3, -81, -26, 43, 8, 65, 63, -1, 0, -85, 34, -71, 0, -29, -28, 12, 1, 69, 42, 0, 0, -1, -16, 96, -2, 27, 66, -100, -109,
				-73, 62, -121, 7, -100, -46, -123, 95, -105, -114, 15, 32, 20, -58, 125, -87, -22, 84, -112, 48, 73, 39, -5, -72, -2, -97, -25, 20, 22, 0, 40, 81, -98, -28, 109, -2, 124, 123, -44, -111, 100, -73, 66, 115, -44, 96, -4, -33, -90, 42, 82, 121, 36, -126, 79, 76, -29, -89, -31, -113, 74,
				78, 73, -38, 23, 60, -12, 10, 121, -10, -23, -19, 78, 86, 56, 85, -7, -70, 99, 1, 122, 126, -98, -43, 99, -27, 42, 56, 36, 2, 73, -62, -11, 62, -36, 84, 124, -87, -22, 121, -32, 113, -9, -72, -1, -11, -44, -116, 49, -126, 1, 81, -48, -15, -6, -13, 75, -111, -109, -98, -25, -126, 71,
				95, -13, -102, -115, 84, -100, -76, 103, 13, -48, 96, 117, -23, -2, 127, 26, 62, -23, 39, 110, 72, -28, 19, -98, 121, -23, -45, -21, 95, -1, 8, 65, 0, 0, 0, -87, 34, -71, 0, -29, -28, 12, 1, 69, 56, 0, 0, -1, -16, 96, -2, 33, 84, 124, -86, 66, 114, 121, 35, 28, -97, -46, -108, -88,
				111, -65, -110, 9, -20, -72, -57, -23, -17, -102, 112, 82, 27, -107, 112, 56, 0, -116, 127, -123, 53, -104, -85, 0, 23, 25, -32, 16, 58, -113, 126, 61, 41, 87, 0, -106, 3, -74, 57, 7, -114, 41, 48, 78, -32, 20, -66, 78, 65, -50, 51, -51, 38, 3, 100, -32, 117, -57, 32, 126, 93, 62,
				-75, 57, 27, 126, 80, -117, -76, -110, 64, 35, -89, 21, 26, 42, -20, 101, 42, 91 });
		Vcdu second = new Vcdu();
		second.readExternal(new byte[] { 64, 5, -28, 86, -41, 0, 0, 0, 0, 62, 113, -64, -56, -2, 116, -114, -92, 0, 2, -32, -127, -128, 66, -3, -31, -12, -57, -83, 32, -54, 19, -55, 83, -116, -113, -105, -89, -23, -17, 77, -112, 7, 56, 80, 0, -58, 1, -59, 1, 21, -47, -108, -116, -32, 100, -28, 117,
				-25, -65, 31, 90, 21, 72, -31, -128, 3, 57, 36, 15, -25, -59, 127, 8, 65, 0, 1, 0, -73, 34, -71, 0, -29, -28, 12, 1, 69, 70, 0, 0, -1, -16, 96, -2, 34, 37, 69, 104, -54, -94, -98, 9, -29, 29, 125, -1, -99, 64, -111, 2, -78, 59, -126, 6, 48, 48, 63, -49, -91, 17, -107, 108, -110, -92,
				0, 122, -123, -21, -57, 81, -59, 56, 64, -123, 25, 74, -98, 70, -30, 49, -45, -12, -89, 36, 74, 74, -19, 4, -28, 100, -126, -67, 125, 121, -57, -75, 40, -99, 3, -31, -63, 17, -9, 5, 122, 126, 24, -85, 33, 109, -16, -5, 83, 113, 61, 9, 92, 99, -97, -89, -79, -84, -7, 64, 47, -75, 120,
				80, 57, 59, 127, -6, -44, -59, 12, -60, 12, 103, 29, -10, -12, 31, -105, -72, -89, -104, -15, -69, -126, 51, -44, 99, 56, -1, 63, -46, -102, -72, -50, 1, 36, 99, -125, -116, -29, -37, 24, -10, -88, -92, 64, 14, 55, 113, -41, -127, -45, -97, -91, 92, -73, 10, -54, 80, -114, 121, 3,
				-125, -4, -15, 73, -26, 75, 18, 61, -74, 91, 110, 48, 65, 31, -3, 106, 8, 65, 0, 2, 0, -43, 34, -71, 0, -29, -28, 12, 1, 69, 84, 0, 0, -1, -16, 96, -2, 32, 45, -40, 7, 0, 6, 17, -80, -63, 27, 122, 123, -12, -87, -82, 74, -60, -56, 98, 96, 78, 114, -60, -81, 83, -97, -91, 93, -119,
				-46, -26, 23, 67, 27, 23, -58, 84, -28, -116, 119, 35, -45, -46, -86, -51, 9, -115, 85, -42, 54, -38, 70, 115, -114, 7, -23, -19, 84, -68, -80, -84, 21, -72, 3, 32, 100, 117, -29, -23, 87, 82, 76, 97, 93, 9, -12, 32, 28, -113, -45, -34, -76, 36, -105, 125, -109, 108, 35, -53, -35,
				-125, -14, -12, 56, -6, 115, -46, -95, 73, 90, -35, -42, 32, -19, 34, -128, 54, -112, -92, 126, -104, -1, 56, -83, 88, -91, 18, 18, -84, 66, -106, -56, 35, 111, 94, 61, 113, -17, 88, 102, -46, 69, 102, 100, 1, -105, 39, 4, 46, 63, -90, 105, -55, 120, -23, -9, -94, -23, -128, 72, -22,
				63, 74, -105, 112, 70, -110, 101, 125, -64, -115, -54, 66, 113, -55, -23, -125, 84, -28, -108, 72, 81, -112, 109, 108, 117, -38, 50, -33, -25, 21, 106, -34, -26, 68, 3, 115, 12, 96, -127, -14, -29, -37, -82, 62, -65, -28, 87, -1, 8, 65, 0, 3, 0, -39, 34, -71, 0, -29, -28, 12, 1, 69,
				98, 0, 0, -1, -16, 95, -4, 76, -102, -24, -54, -32, -17, 39, 28, 0, 7, -1, 90, -123, 23, -110, -85, 121, 81, -126, -92, 13, -32, 55, -21, 76, -98, -54, 97, 43, 103, 32, -104, -61, -87, 43, -58, 120, -10, -6, -2, 84, 89, -61, 9, 5, -91, 3, 12, 50, 120, 35, -7, 85, -101, 123, -87, 109,
				-128, 54, -73, 36, 24, -50, -28, 27, 122, 28, 123, -113, 115, 85, -102, -10, 121, -80, 27, -112, 9, -24, -100, -125, -7, 83, -91, 51, 64, -30, 59, -106, -36, 8, -54, -110, 56, -85, -111, -54, -105, 86, -23, 101, 38, 24, 121, -65, 41, 3, -90, 120, -24, 7, -45, -14, -86, -111, -37,
				-54, 93, -30, -13, -10, -87, 110, -91, 58, -29, -11, -85, 22, 80, 61, -43, -68, -112, -54, -54, 66, 0, 87, -116, 17, -48, 103, 61, -7, -59, 84, -116, -120, -90, 85, -115, -128, -36, -39, -63, 31, -30, 63, -50, 106, -33, -38, 46, 3, -92, -46, -79, -63, 56, 4, -88, 57, 29, 58, 98,
				-108, -69, -106, 50, 14, 64, 57, -36, 23, -1, -83, 90, 12, -81, 118, -112, 5, -120, 100, -93, 18, 11, 117, 24, -26, -65, -1, 8, 65, 0, 4, 0, -81, 34, -71, 0, -29, -28, 12, 1, 69, 112, 0, 0, -1, -16, 94, -4, 85, -66, -37, 20, -128, -29, 104, 61, -79, -46, -84, 42, -67, -60, 73, 25,
				-55, 85, 92, 1, -128, 56, -57, -1, -82, -82, 65, -91, -61, 101, 15, -104, -40, 46, 62, -96, -118, -86, -109, 9, 102, 36, 14, 1, -23, -116, 85, -120, -97, -49, -105, 44, 72, 0, 116, -59, 107, 24, 22, 59, 20, 120, -45, 14, 73, 0, -6, 127, -109, 84, 53, 73, 11, -62, -95, 64, 36, -116,
				30, 49, 89, -23, 31, 72, -56, -50, 7, 60, 98, -73, -68, 63, -31, -123, -68, 34, 89, -113, -105, 8, -63, 44, 70, 127, 26, -23, 83, 81, -73, -46, 45, 76, 54, 0, -122, 35, -26, -109, -100, -73, -32, 71, 21, -49, -22, -38, -5, 59, 18, 78, 2, -100, 31, 122, -54, -72, -44, -98, 117, 32,
				-109, -125, -8, -43, 103, -97, 40, 48, 57, 61, -15, -41, -38, -94, 18, -103, -80, 23, -128, 127, 90, 8, 65, 0, 5 });
		List<Vcdu> all = new ArrayList<>();
		all.add(first);
		all.add(second);
		MeteorImage image = new MeteorImage(new PacketReassembly(all));
		TestUtil.assertImage("expectedPacketCounterOverflow.png", image.toBufferedImage());
	}

	private static List<Vcdu> readVcdu() throws Exception {
		byte[] vcduData = toBytes("vcdu.bin");
		Vcdu vcdu = new Vcdu();
		vcdu.readExternal(vcduData);
		List<Vcdu> data = new ArrayList<>();
		data.add(vcdu);
		return data;
	}

	@Test
	public void testNoImage() throws Exception {
		MeteorImage image = new MeteorImage(new PacketReassembly(new ArrayList<>()));
		assertNull(image.toBufferedImage());
	}

	public static byte[] toBytes(String source) throws IOException {
		InputStream is = MeteorImageTest.class.getClassLoader().getResourceAsStream(source);
		if (is == null) {
			throw new IllegalArgumentException("cannot find in classpath: " + source);
		}
		byte[] buffer = IOUtils.toByteArray(is);
		is.close();
		return buffer;
	}

	// performance test
//	public static void main(String[] args) throws Exception {
//		int symbolRate = 72000;
//		LOG.info("started");
//		String filename = "your file is here";
//		WavFileSource source = new WavFileSource(new BufferedInputStream(new FileInputStream(filename)));
//		Constellation constel = new Constellation(new float[] { -1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 1.0f, -1.0f }, new int[] { 0, 1, 3, 2 }, 4, 1);
//		QpskDemodulator qpskDemod = new QpskDemodulator(source, symbolRate, constel);
//		MeteorM meteor = new MeteorMN2(qpskDemod);
//		MeteorImage image = new MeteorImage(meteor);
//		LOG.info("decoded");
//		BufferedImage actual = image.toBufferedImage();
//		if (actual != null) {
//			ImageIO.write(actual, "png", new File("./target/output_fixed.png"));
//		}
//		meteor.close();
//		LOG.info("done");
//	}

}
