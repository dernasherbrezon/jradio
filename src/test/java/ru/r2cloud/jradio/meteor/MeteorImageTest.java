package ru.r2cloud.jradio.meteor;

import static org.junit.Assert.assertNull;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.junit.Test;

import ru.r2cloud.jradio.TestUtil;
import ru.r2cloud.jradio.lrpt.PacketReassembly;
import ru.r2cloud.jradio.lrpt.Vcdu;

public class MeteorImageTest {

	@Test
	public void success() throws Exception {
		MeteorImage image = new MeteorImage(new PacketReassembly(readVcdu()));
		TestUtil.assertImage("expected8bitsoft.png", image.toBufferedImage());
	}

	@Test
	public void testUnknownAPID() throws Exception {
		MeteorImage image = new MeteorImage(new PacketReassembly(readVcdu()));
		assertNull(image.toBufferedImage(1, 2, 3)); // not random. explicitly unknown apid
	}

	@Test
	public void testRecoverPartialPacket() throws Exception {
		Vcdu previous = new Vcdu();
		previous.readExternal(new byte[] { 64, 5, 103, -120, 67, 0, 0, 0, 1, -82, -87, 36, 34, -37, -53, -75, -73, -68, -110, -11, -119, -74, 120, 89, 60, -72, -123, -76, -47, 29, -111, 66, 9, 71, 27, 90, 121, -111, 18, -67, -29, -63, 31, 26, 53, 29, 63, 80, -66, -45, 53, -69, 123, 95, 16, 120, 123,
				83, -71, -123, -82, -20, 36, 73, 46, 103, -115, -18, 18, 56, -18, -97, 78, -115, -30, -103, 37, -104, -51, -2, -111, 36, 87, 49, 8, 103, 111, 52, 21, 67, 34, 10, -77, -30, -101, -69, 121, 117, -115, 71, 74, -45, 111, 46, -82, 60, 45, 22, -95, 30, -95, 107, 109, 29, -57, -105, 29,
				-78, 77, 105, 29, -54, 75, 4, -42, -5, -83, -83, 25, 92, -57, 110, 98, 114, -111, 60, 106, -23, -125, -27, -77, -41, -47, 63, 15, 60, 115, 97, 103, -90, -23, -6, 44, -105, 26, -28, -117, 111, 49, -118, 93, 127, 80, -69, -76, -72, 91, 123, -23, -121, -37, 34, -123, -18, 97, -107, -96,
				88, 35, -119, -56, 69, -75, -123, 54, 90, 58, -18, -7, -39, -115, 123, -107, -67, -19, -34, -81, 109, 45, -44, -74, -13, 67, -87, 91, -126, 38, -74, 44, 26, 59, -127, 20, 40, 90, 75, 98, -84, -2, 101, -76, -83, -52, 114, 72, 8, 110, 50, -54, -37, -106, -109, -61, 122, -68, -38, -115,
				-51, -44, 83, 91, 53, -80, -122, 47, -35, 65, 41, 34, 88, -2, 95, 46, 88, -98, 45, -33, -22, 76, -101, 94, 38, 87, 36, 110, 36, 16, 114, 43, 66, -27, 18, 68, -98, 59, -121, 125, -29, -49, 62, 68, 5, -60, -17, 110, 35, 9, -26, -55, 12, -114, 126, -25, -33, -74, -107, -117, 35, 55, 28,
				103, 109, 87, -46, 103, -74, -109, 73, -71, -79, -106, 83, 127, 61, -124, 114, -54, 117, 75, -123, -123, -84, 60, -57, 99, 116, -42, -65, 104, -115, -107, 34, 107, 52, -111, 33, 16, 21, -113, -55, -122, 56, -45, -51, -111, -47, -51, 114, 90, 93, -41, -10, 53, -70, -88, 103, -70, 73,
				100, -108, -91, -47, -110, 54, -73, 97, 25, 112, 18, 61, -110, -99, -110, 43, 43, 5, 82, 48, -54, -123, -121, -52, 36, 90, -20, 45, 111, -42, -10, -36, 27, -123, -113, 108, -85, -124, 10, 22, 71, -63, 31, 51, 58, -122, 56, 7, 110, 21, -121, -33, 0, -100, 12, -125, 84, -27, -128, -37,
				114, 36, 114, -124, -110, -128, -112, 9, 81, -58, 7, -53, -9, -127, 31, 47, 60, -125, -73, -109, -127, 95, 8, 66, 45, 68, 1, -7, 34, -79, 2, 24, 13, 98, 0, -89, 56, 0, 0, -1, -16, 100, -6, 57, 103, 44, -92, -111, -128, -67, 119, 112, 93, 71, -44, -4, -57, -14, -56, -55, 24, -28, -46,
				59, 36, -86, 89, 114, 14, 6, 58, 19, -49, 114, 121, 98, -93, 60, 30, 72, 60, 100, 98, -86, 25, -100, 43, 47, 59, -104, -114, 119, -32, -108, 24, 36, 18, 51, -72, 113, -112, 125, -58, -27, -63, -51, 95, -76, -80, -80, 123, 96, -104, -55, 12, 93, -95, 32, 56, 4, -25, 63, -69, -55, 92,
				30, -71, 35, 1, -104, -114, 67, 48, -84, -5, -5, 99, -122, -120, 0, 34, 40, 4, 81, -93, -108, 30, 98, -71, -5, -32, 22, 13, 38, -42, 17, -110, 119, -31, 89, -43, 16, 114, 107, -109, 91, 75, -85, 70, -71, -69, -113, -54, 62, 99, 100, -61, 25, 39, 105, -56, 46, -82, -92, -112, 31,
				-123, 108, 14, 14, 67, 5, 6, -68, -45, -57, 26, 66, 120, -97, 75, -72, -78, 105, -91, -73, 116, 95, 51, 108, 45, -27, -71, 108, 56, -7, 73, 12, 74, 2, 88, -70, -100, 17, -116, -100, 12, -118, -4, -52, -8, -43, -5, 58, 120, -85, -30, -41, -119, 116, -19, 11, 78, -72, -118, -38, -62,
				57, 34, -121, 81, -44, -75, 22, -108, 8, -84, -30, -100, 75, 57, -126, 104, -46, -31, 26, -22, 50, -123, 33, -114, 104, -122, -39, 10, -17, -62, -4, -11, 75, -30, 95, -122, -18, -66, 31, -4, 46, 79, -122, -42, -82, -70, -59, -75, -98, -97, 14, -97, 5, -27, -22, -57, 22, -7, -127, 16,
				79, 3, -83, -80, 72, -34, 57, 85, 54, 36, 97, 24, -55, -106, 105, 15, -33, 74, -4, -65, -15, 79, -128, 124, 27, -95, 104, -6, -107, -42, -87, -88, 105, -42, -34, 34, 123, -92, 104, 44, 22, -6, 25, 17, 35, -30, 71, 89, 33, 54, 98, 84, 64, 76, -116, 73, 46, 22, 49, 26, 49, 87, 44,
				-107, -13, -83, -27, -99, -116, 105, 58, -37, 53, -45, -52, -37, -110, 63, 39, 106, 90, 0, 126, 86, 62, 98, -99, -14, 35, 14, 97, 80, -69, 88, -110, -60, 101, 113, 84, -76, -69, 59, 89, 110, 26, 45, 67, 81, -109, 79, 83, -127, -10, -105, 86, 104, 91, 50, 42, 54, 124, -88, 101, -108,
				-82, -59, 119, 37, 80, -72, -112, -82, 85, -64, 106, -72, -98, 50, -15, 38, -125, -10, -101, 47, 12, -8, -85, -60, 118, 26, 108, -61, 100, -93, 79, -44, -75, 29, 50, 57, -63, 72, -124, -34, 100, 54, -73 });
		Vcdu full = new Vcdu();
		full.readExternal(new byte[] { 64, 5, 103, -120, 67, 0, 0, 0, 1, -82, -87, 36, 34, -37, -53, -75, -73, -68, -110, -11, -119, -74, 120, 89, 60, -72, -123, -76, -47, 29, -111, 66, 9, 71, 27, 90, 121, -111, 18, -67, -29, -63, 31, 26, 53, 29, 63, 80, -66, -45, 53, -69, 123, 95, 16, 120, 123, 83,
				-71, -123, -82, -20, 36, 73, 46, 103, -115, -18, 18, 56, -18, -97, 78, -115, -30, -103, 37, -104, -51, -2, -111, 36, 87, 49, 8, 103, 111, 52, 21, 67, 34, 10, -77, -30, -101, -69, 121, 117, -115, 71, 74, -45, 111, 46, -82, 60, 45, 22, -95, 30, -95, 107, 109, 29, -57, -105, 29, -78,
				77, 105, 29, -54, 75, 4, -42, -5, -83, -83, 25, 92, -57, 110, 98, 114, -111, 60, 106, -23, -125, -27, -77, -41, -47, 63, 15, 60, 115, 97, 103, -90, -23, -6, 44, -105, 26, -28, -117, 111, 49, -118, 93, 127, 80, -69, -76, -72, 91, 123, -23, -121, -37, 34, -123, -18, 97, -107, -96, 88,
				35, -119, -56, 69, -75, -123, 54, 90, 58, -18, -7, -39, -115, 123, -107, -67, -19, -34, -81, 109, 45, -44, -74, -13, 67, -87, 91, -126, 38, -74, 44, 26, 59, -127, 20, 40, 90, 75, 98, -84, -2, 101, -76, -83, -52, 114, 72, 8, 110, 50, -54, -37, -106, -109, -61, 122, -68, -38, -115,
				-51, -44, 83, 91, 53, -80, -122, 47, -35, 65, 41, 34, 88, -2, 95, 46, 88, -98, 45, -33, -22, 76, -101, 94, 38, 87, 36, 110, 36, 16, 114, 43, 66, -27, 18, 68, -98, 59, -121, 125, -29, -49, 62, 68, 5, -60, -17, 110, 35, 9, -26, -55, 12, -114, 126, -25, -33, -74, -107, -117, 35, 55, 28,
				103, 109, 87, -46, 103, -74, -109, 73, -71, -79, -106, 83, 127, 61, -124, 114, -54, 117, 75, -123, -123, -84, 60, -57, 99, 116, -42, -65, 104, -115, -107, 34, 107, 52, -111, 33, 16, 21, -113, -55, -122, 56, -45, -51, -111, -47, -51, 114, 90, 93, -41, -10, 53, -70, -88, 103, -70, 73,
				100, -108, -91, -47, -110, 54, -73, 97, 25, 112, 18, 61, -110, -99, -110, 43, 43, 5, 82, 48, -54, -123, -121, -52, 36, 90, -20, 45, 111, -42, -10, -36, 27, -123, -113, 108, -85, -124, 10, 22, 71, -63, 31, 51, 58, -122, 56, 7, 110, 21, -121, -33, 0, -100, 12, -125, 84, -27, -128, -37,
				114, 36, 114, -124, -110, -128, -112, 9, 81, -58, 7, -53, -9, -127, 31, 47, 60, -125, -73, -109, -127, 95, 8, 66, 45, 68, 1, -7, 34, -79, 2, 24, 13, 98, 0, -89, 56, 0, 0, -1, -16, 100, -6, 57, 103, 44, -92, -111, -128, -67, 119, 112, 93, 71, -44, -4, -57, -14, -56, -55, 24, -28, -46,
				59, 36, -86, 89, 114, 14, 6, 58, 19, -49, 114, 121, 98, -93, 60, 30, 72, 60, 100, 98, -86, 25, -100, 43, 47, 59, -104, -114, 119, -32, -108, 24, 36, 18, 51, -72, 113, -112, 125, -58, -27, -63, -51, 95, -76, -80, -80, 123, 96, -104, -55, 12, 93, -95, 32, 56, 4, -25, 63, -69, -55, 92,
				30, -71, 35, 1, -104, -114, 67, 48, -84, -5, -5, 99, -122, -120, 0, 34, 40, 4, 81, -93, -108, 30, 98, -71, -5, -32, 22, 13, 38, -42, 17, -110, 119, -31, 89, -43, 16, 114, 107, -109, 91, 75, -85, 70, -71, -69, -113, -54, 62, 99, 100, -61, 25, 39, 105, -56, 46, -82, -92, -112, 31,
				-123, 108, 14, 14, 67, 5, 6, -68, -45, -57, 26, 66, 120, -97, 75, -72, -78, 105, -91, -73, 116, 95, 51, 108, 45, -27, -71, 108, 56, -7, 73, 12, 74, 2, 88, -70, -100, 17, -116, -100, 12, -118, -4, -52, -8, -43, -5, 58, 120, -85, -30, -41, -119, 116, -19, 11, 78, -72, -118, -38, -62,
				57, 34, -121, 81, -44, -75, 22, -108, 8, -84, -30, -100, 75, 57, -126, 104, -46, -31, 26, -22, 50, -123, 33, -114, 104, -122, -39, 10, -17, -62, -4, -11, 75, -30, 95, -122, -18, -66, 31, -4, 46, 79, -122, -42, -82, -70, -59, -75, -98, -97, 14, -97, 5, -27, -22, -57, 22, -7, -127, 16,
				79, 3, -83, -80, 72, -34, 57, 85, 54, 36, 97, 24, -55, -106, 105, 15, -33, 74, -4, -65, -15, 79, -128, 124, 27, -95, 104, -6, -107, -42, -87, -88, 105, -42, -34, 34, 123, -92, 104, 44, 22, -6, 25, 17, 35, -30, 71, 89, 33, 54, 98, 84, 64, 76, -116, 73, 46, 22, 49, 26, 49, 87, 44,
				-107, -13, -83, -27, -99, -116, 105, 58, -37, 53, -45, -52, -37, -110, 63, 39, 106, 90, 0, 126, 86, 62, 98, -99, -14, 35, 14, 97, 80, -69, 88, -110, -60, 101, 113, 84, -76, -69, 59, 89, 110, 26, 45, 67, 81, -109, 79, 83, -127, -10, -105, 86, 104, 91, 50, 42, 54, 124, -88, 101, -108,
				-82, -59, 119, 37, 80, -72, -112, -82, 85, -64, 106, -72, -98, 50, -15, 38, -125, -10, -101, 47, 12, -8, -85, -60, 118, 26, 108, -61, 100, -93, 79, -44, -75, 29, 50, 57, -63, 72, -124, -34, 100, 54, -73 });
		List<Vcdu> all = new ArrayList<>();
		all.add(previous);
		all.add(full);
		MeteorImage image = new MeteorImage(new PacketReassembly(all));
		TestUtil.assertImage("expectedPartial.png", image.toBufferedImage());
	}

	private static List<Vcdu> readVcdu() throws Exception {
		byte[] vcduData = toBytes("vcdu.bin");
		Vcdu vcdu = new Vcdu();
		vcdu.readExternal(vcduData);
		List<Vcdu> data = new ArrayList<>();
		data.add(vcdu);
		return data;
	}

	@Test
	public void testNoImage() throws Exception {
		MeteorImage image = new MeteorImage(new PacketReassembly(new ArrayList<>()));
		assertNull(image.toBufferedImage());
	}

	public static byte[] toBytes(String source) throws IOException {
		InputStream is = MeteorImageTest.class.getClassLoader().getResourceAsStream(source);
		if (is == null) {
			throw new IllegalArgumentException("cannot find in classpath: " + source);
		}
		byte[] buffer = IOUtils.toByteArray(is);
		is.close();
		return buffer;
	}

	// performance test
//	public static void main(String[] args) throws Exception {
//		int symbolRate = 72000;
//		LOG.info("started");
//		String filename = "your file is here";
//		WavFileSource source = new WavFileSource(new BufferedInputStream(new FileInputStream(filename)));
//		Constellation constel = new Constellation(new float[] { -1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 1.0f, -1.0f }, new int[] { 0, 1, 3, 2 }, 4, 1);
//		QpskDemodulator qpskDemod = new QpskDemodulator(source, symbolRate, constel);
//		MeteorM meteor = new MeteorMN2(qpskDemod);
//		MeteorImage image = new MeteorImage(meteor);
//		LOG.info("decoded");
//		BufferedImage actual = image.toBufferedImage();
//		if (actual != null) {
//			ImageIO.write(actual, "png", new File("./target/output_fixed.png"));
//		}
//		meteor.close();
//		LOG.info("done");
//	}

}
