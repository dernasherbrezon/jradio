package ru.r2cloud.jradio.eirsat;

import static com.google.code.beanmatchers.BeanMatchers.hasValidBeanConstructor;
import static com.google.code.beanmatchers.BeanMatchers.hasValidGettersAndSetters;
import static org.hamcrest.CoreMatchers.allOf;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;

import ru.r2cloud.jradio.AssertJson;
import ru.r2cloud.jradio.fec.ViterbiTest;

public class EirsatBeaconTest {

	@Test
	public void testBeacon() throws Exception {
		byte[] data = ViterbiTest.hexStringToByteArray(
				"0010585818000802c05800d3100319024549525341542d314972656c616e64277320466972737420536174656c6c69746521202020202020005ae49700000714442f01008dff6f80000000000000000000000000000000000000000000000000000000000000000000000000000738a769ea6c0000032ae8f05d737800c1c04002fe43fd8afc6ffd8900402004020040200400326bffdbffac00700000000000000001c4945d200001b000027280007fffffffe0000fffffffffc0003ffffff0000fffffffffffff00000000000004c007409980008c04bfffffffffffff1d9d07ff
		EirsatBeacon result = new EirsatBeacon();
		result.readBeacon(data);
		AssertJson.assertObjectsEqual("EirsatBeacon-housekeeping.json", result);
	}

	@Test
	public void testUnknown() throws Exception {
		byte[] data = ViterbiTest.hexStringToByteArray(
				"00209F9F1814000000000000000000000000000000000000405B0802D43E00081001071802C250A9C40802D43F000C10050100DE001000000000764D0802D44000F9100D03BD000900090000000000000000000000000002B95A468EA4A08000331E4B0AD73780242305C0211045395F49353952497A202C10005104918AC9C00FEFFFFBBFFA3FEF1586F8E1A34395AA00000000000000001E45BFF749D5FFFFFFFF830F3FFFFFFFFF0000FFFFFFC0003FFFFFFFFFFFFC000003000000460037004700000F08FFFFFFFFFFFFFC00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000D2BF07FF00000239000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		EirsatBeacon result = new EirsatBeacon();
		result.readBeacon(data);
		AssertJson.assertObjectsEqual("EirsatBeacon-unknown.json", result);
	}

	@Test
	public void testOom() throws Exception {
		byte[] data = new byte[] { -69, 89, -112, -86, 112, 11, 127, 19, -10, 95, 40, -12, 55, 29, 54, -59, 37, -124, -117, -109, 26, 86, -120, 35, 60, -43, -44, 12, 31, 94, -16, -25, 118, -77, 33, 84, -32, 22, -2, 39, -20, -66, 81, -24, 110, 58, 109, -118, 75, 9, 23, 38, 52, -83, 16, 70, 121, -85,
				-88, 24, 62, -67, -31, -50, -19, 102, 66, -87, -64, 45, -4, 79, -39, 124, -93, -48, -36, 116, -37, 20, -106, 18, 46, 76, 105, 90, 32, -116, -13, 87, 80, 48, 125, 123, -61, -99, -38, -52, -123, 83, -128, 91, -8, -97, -78, -7, 71, -95, -72, -23, -74, 41, 44, 36, 92, -104, -46, -76, 65,
				25, -26, -82, -96, 96, -6, -9, -121, 59, -75, -103, 10, -89, 0, -73, -15, 63, 101, -14, -113, 67, 113, -45, 108, 82, 88, 72, -71, 49, -91, 104, -126, 51, -51, 93, 64, -63, -11, -17, 14, 119, 107, 50, 21, 78, 1, 111, -30, 126, -53, -27, 30, -122, -29, -90, -40, -92, -80, -111, 114,
				99, 74, -47, 4, 103, -102, -70, -127, -125, -21, -34, 28, -18, -42, 100, 42, -100, 2, -33, -60, -3, -105, -54, 61, 13, -57, 77, -79, 73, 97, 34, -28, -58, -107, -94, 8, -49, 53, 117, 3, 7, -41, -68, 57 };
		EirsatBeacon result = new EirsatBeacon();
		result.readBeacon(data);
		AssertJson.assertObjectsEqual("EirsatBeacon-oom.json", result);
	}

	@Test
	public void testPojo() {
		assertThat(EirsatBeacon.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Packet.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Housekeeping.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(HkStruct00.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(HkStruct02.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Separationsequence.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Obc.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Bat.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Eps.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(AdcsArray.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(EpsSolar.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Adcs.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Cmc.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Emod.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Gmod.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Wbc.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(CoreEvent.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Datapool.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
	}
}
