package ru.r2cloud.jradio.eirsat;

import static com.google.code.beanmatchers.BeanMatchers.hasValidBeanConstructor;
import static com.google.code.beanmatchers.BeanMatchers.hasValidGettersAndSetters;
import static org.hamcrest.CoreMatchers.allOf;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;

import ru.r2cloud.jradio.AssertJson;
import ru.r2cloud.jradio.fec.ViterbiTest;

public class EirsatBeaconTest {

	@Test
	public void testBeacon() throws Exception {
		byte[] data = ViterbiTest.hexStringToByteArray(
				"0010585818000802c05800d3100319024549525341542d314972656c616e64277320466972737420536174656c6c69746521202020202020005ae49700000714442f01008dff6f80000000000000000000000000000000000000000000000000000000000000000000000000000738a769ea6c0000032ae8f05d737800c1c04002fe43fd8afc6ffd8900402004020040200400326bffdbffac00700000000000000001c4945d200001b000027280007fffffffe0000fffffffffc0003ffffff0000fffffffffffff00000000000004c007409980008c04bfffffffffffff1d9d07ff
		EirsatBeacon result = new EirsatBeacon();
		result.readBeacon(data);
		AssertJson.assertObjectsEqual("EirsatBeacon-housekeeping.json", result);
	}

	@Test
	public void testUnknown() throws Exception {
		byte[] data = ViterbiTest.hexStringToByteArray(
				
		EirsatBeacon result = new EirsatBeacon();
		result.readBeacon(data);
		AssertJson.assertObjectsEqual("EirsatBeacon-unknown.json", result);
	}

	@Test
	public void testPojo() {
		assertThat(EirsatBeacon.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Packet.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Housekeeping.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(HkStruct00.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(HkStruct02.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Separationsequence.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Obc.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Bat.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Eps.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(AdcsArray.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(EpsSolar.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Adcs.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Cmc.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Emod.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Gmod.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Wbc.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(CoreEvent.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
		assertThat(Datapool.class, allOf(hasValidBeanConstructor(), hasValidGettersAndSetters()));
	}
}
