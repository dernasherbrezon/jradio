package ru.r2cloud.jradio.fox;

import static org.junit.Assert.assertTrue;

import org.junit.Test;

import ru.r2cloud.jradio.TestUtil;
import ru.r2cloud.jradio.fec.ViterbiTest;

public class FoxPictureDecoderTest {
	
	@Test
	public void testSuccess() throws Exception {
		byte[] data = ViterbiTest.hexStringToByteArray
		Fox1DBeacon result = new Fox1DBeacon();
		result.readExternal(data);
		FoxPictureDecoder decoder = new FoxPictureDecoder(result.getPictureScanLines());
		assertTrue(decoder.hasNext());
		TestUtil.assertImage("expected/fox1dPicture.png", decoder.next());
	}

}
